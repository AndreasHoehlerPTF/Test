<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="FB_PrintModule_WEU" Id="{cd3841ec-9e5a-4fa8-a024-0646cabe904a}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_PrintModule_WEU EXTENDS FB_PrintModule_Base
VAR
  (* Module specific sub-modules - WEU module contains a 
    - print position (encoder input to print domain translation)
    - Mark sensor with a mark detection module which provices a camera trigger and start position detection
    - Mark definition (used by the detection and camera)
  *)
  fbPrintPosition    : FB_PrintPositionDmax;   // a position per pm (external encoder wheel)
  fbMarkDefinition   : FB_MarkDefinition;      // mark definition instance (used by MarkDetection and camera)
  fbMarkDetection    : FB_MarkDetection;       // StartPosTrigger, CameraTrigger and MarkDetection (Mark handler for MarkCamera)
  fbMarkCameraWeu    : FB_MarkCamera_WEU;      // Mark detection camera
  fbNoCamera         : FB_CameraDummy;         // dummy sheet detect camera (not actively used)
  // view
  fbView             : FB_PrintModule_View;    //
END_VAR
VAR PERSISTENT
  _fEncoderCylinderDiameter : LREAL := 100.0;      // Encoder cylinder diameter [mm]
END_VAR
VAR CONSTANT
  fC_EncoderImpU : LREAL := 10_000 * 4;   // Impulses * 4 times sampling [Imp/U]
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[// - calculate encoder resolution (fL_SubstrateThickness with factor is added to the radius because of the neutral fiber of the substrate)
//   update encoder position based on machine parameter
_iPrintPosition.fEnoderResolution := ((_fEncoderCylinderDiameter / 1000 / 2) + (_pModuleMachineState^.fSubstrateThickness * (_pModuleMachineState^.fNeutralFibreFactor) / 100)) * 2 * PI * 1_000_000 / fC_EncoderImpU;
fbPrintPosition();

//fbMarkDefinition();   // no call to body 
fbMarkDetection(
  bEnable:=bReadyForPrinting,
  bAutomaticMode:=TRUE,
  nCurrentPos:=_iPrintPosition.getPosition(),
  fCurrentSpeed:=_iPrintPosition.getSpeed()
);

fbMarkCameraWeu();
fbNoCamera();
fbView();

// call module base
SUPER^();

// simulation
SimUpdate();

// machine interface outputs
_pModuleMachineFeedback^.nPrintMarkPosBits := fbMarkDetection.nPrintMarkPosBits;
_pModuleMachineFeedback^.bSpeedExeeded := checkSpeed(fSpeed:=fSpeed, fMaxSpeed => _pModuleMachineFeedback^.fMaxSpeed);
]]></ST>
    </Implementation>
    <Folder Name="Simulation" Id="{05f0967a-1921-41d6-9063-2519e33a105e}" />
    <Method Name="checkSpeed" Id="{0a2a08db-f4e0-47b5-8c93-7e3e0d0ba7dd}">
      <Declaration><![CDATA[(*
  Checks if current speed is higher than max. speed.
  :return: TRUE if speed exeeds maximum
*)
METHOD PRIVATE checkSpeed : BOOL
VAR_INPUT
  fSpeed : LREAL;       // current speed
END_VAR
VAR_OUTPUT
  fMaxSpeed : LREAL;    // modules max. printing speed
END_VAR
VAR
  f : LREAL;
  i : UDINT;
END_VAR
VAR_INST
  fbSpeedFilterMav : FB_FILTER_MAV;           // Moving average filter
  fMaxSpeedTolerence : LREAL := 1.0/60;       // Allow max. speed to exeed limit + this tolerance 
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// disabled
IF NOT _pAdsPm^.bI_Enable OR NOT _pModuleMachineState^.bEngaged THEN 
  checkSpeed := FALSE;
  fMaxSpeed := 0;
  RETURN;
END_IF 


// filter current speed
fbSpeedFilterMav(fI_Input := fSpeed, iI_NbInputs := 32);  (*max iI_NbInputs = 32!*)

// find slowest max. speed
f := 0;
FOR i:=1 TO GVL_WEU.nC_WorkerPrintPerPm DO
  IF fbWorkerPrint[i].bWorkerEnable THEN
    IF fbWorkerPrint[i].fMaxSpeed = 0 THEN
      ; // ignored speed
    ELSIF f = 0 OR f > fbWorkerPrint[i].fMaxSpeed THEN 
      f := fbWorkerPrint[i].fMaxSpeed;
		END_IF
	END_IF
END_FOR

fMaxSpeed := f;   // return max. possible speed

// check if too fast
IF f > 0 AND fbSpeedFilterMav.fO_OutputMav > f THEN 
  checkSpeed := TRUE; // speed exceeded
ELSE
  checkSpeed := FALSE;
END_IF

]]></ST>
      </Implementation>
    </Method>
    <Method Name="Init" Id="{6b1e49f2-001d-47d0-9cb8-63846cddbdc5}">
      <Declaration><![CDATA[METHOD Init : BOOL
VAR_INPUT
  nIdx                  : UDINT;                                // Module id
  pAdsPm                : POINTER TO ST_ADS_PM;                 // ADS module
  pAdsSa                : POINTER TO ST_ADS_DVTSHEETALIGNMENT;  // ADS sheet alignement
  pAdsCam               : POINTER TO ST_ADS_CAMERA;             // ADS camera
  pAdsPg                : ARRAY[1..GVL_WEU.nC_WorkerPrintPerPm] OF POINTER TO ST_ADS_PG;  // PG -> worker ads 
  
  // config print
  fPrintResolution      : LREAL := 600;         // print(head) resolution in [dpi]
  fSubPxResolution      : LREAL := 32;          // SubPixel resolution [SubPx], resolution factor (fI_PrintResolution*fI_SubPxResolution=>Output resolution)
  fCycleTime            : LREAL;                // task cycle time in [s]
  fPrintUnitWidth       : LREAL;                // PrintUnit width mechanical [m]
  nYShiftPcCenter       : UDINT;                // Y shift for centered image data in RAM [px]
  // references
  iModuleMaster         : I_ModuleMaster;       // interface for module to master (main) communication
  iPosition             : I_PrintPosition;      // interface for print position
  iStartPos             : I_StartPosDetect;     // interface for start position detect
  pMachineInputs        : POINTER TO ST_ModuleMachineInterface_IN;
  pMachineOutputs       : POINTER TO ST_ModuleMachineInterface_OUT;
END_VAR
VAR
  nCtr : UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[fbPrintPosition.Init(fPrintResolution:=fPrintResolution, fSubPxResolution:=fSubPxResolution, fTaskCycleTime:=fCycleTime);
// -- Mark definition handler
fbMarkDefinition.Init();
// -- Sheet/Camera trigger & mark detection
fbMarkDetection.Init(fPrintResolution:=fPrintResolution, fSubPxResolution:=fSubPxResolution, pFbMarkDefinition:=ADR(fbMarkDefinition));

// -- Mark camera
fbMarkCameraWeu.InitMarkCamera(nPrintUnitResolution:=nC_PrintResolution,nPrintUnitSubPx:=nC_SubPixelResolution, iCameraTrigger:=fbMarkDetection, iMarkDefinition:=fbMarkDefinition);
fbMarkCameraWeu.sVisuName := 'VISU_MarkCamera_WEU';
fbWorkerCamera.RegisterCamera(fbMarkCameraWeu);

// -- Camera if Mark is not selected
fbNoCamera.Init(nPrintUnitResolution:=nC_PrintResolution, nPrintUnitSubPx:=nC_SubPixelResolution, iCameraTrigger:=fbMarkDetection, bUseCameraTrigger:=FALSE, bUseCameraTriggerFeedback:=FALSE);
fbWorkerCamera.RegisterCamera(fbNoCamera);


SUPER^.Init(
  nIdx              := nIdx,
  pAdsPm            := pAdsPm,
  pAdsSa            := pAdsSa,
  pAdsCam           := pAdsCam,
  pAdsPg            := pAdsPg,
  // config print
  fPrintResolution  := fPrintResolution,
  fSubPxResolution  := fSubPxResolution,
  fCycleTime        := fCycleTime,
  fPrintUnitWidth   := fPrintUnitWidth,
  nYShiftPcCenter   := nYShiftPcCenter,
  // references     
  iModuleMaster     := iModuleMaster,     // internal subm
  iPosition         := fbPrintPosition,   // internal subm
  iStartPos         := fbMarkDetection,   // internal subm
  pMachineInputs    := pMachineInputs,
  pMachineOutputs   := pMachineOutputs
);

fbView.init(pModule:=THIS, pPositioning:=ADR(fbPrintPosition));
setLogLevels(lvl:=E_LogSeverity.Debug);]]></ST>
      </Implementation>
    </Method>
    <Method Name="setLogLevels" Id="{5091c51d-bf32-4546-a533-7a39a341c61f}">
      <Declaration><![CDATA[METHOD PROTECTED setLogLevels
VAR_INPUT
  lvl : E_LogSeverity;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// - base
SUPER^.setLogLevels(lvl:=lvl);
// - weu
fbPrintPosition.LogLevel := lvl;
fbMarkDefinition.LogLevel := lvl;
fbMarkDetection.LogLevel := lvl;
fbMarkCameraWeu.LogLevel := lvl;
fbNoCamera.LogLevel := lvl;]]></ST>
      </Implementation>
    </Method>
    <Method Name="SimUpdate" Id="{42a3144b-ca98-40e7-9819-aab64ee0cc36}" FolderPath="Simulation\">
      <Declaration><![CDATA[METHOD PRIVATE SimUpdate
VAR_INPUT
END_VAR
VAR_INST
  rfTrig_SimEnable : RF_TRIG;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[rfTrig_SimEnable(CLK:=_bSimEnable);
IF    rfTrig_SimEnable.RT THEN
  // ev. enable
  //fbWorkerCamera.bWorkerEnable := TRUE;
  //fbWorkerDeformation.bWorkerEnable := TRUE;
  //fbWorkerPrint[1].bWorkerEnable := TRUE;
  //fbWorkerPrint[2].bWorkerEnable := TRUE;
  
  fbPrintPosition.bSimEnable  := TRUE;
  //fbMarkDefinition
  fbMarkDetection.bSimEnable := TRUE;
  fbMarkCameraWeu.bSimulate := TRUE;

ELSIF rfTrig_SimEnable.FT THEN
  // ev. disable
  fbPrintPosition.bSimEnable  := FALSE;
  fbMarkDetection.bSimEnable := FALSE;
  fbMarkCameraWeu.bSimulate := FALSE;

ELSIF _bSimEnable THEN
  // enabled
  ;
ELSE
  ; // disabled
END_IF
]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_PrintModule_WEU">
      <LineId Id="86" Count="2" />
      <LineId Id="76" Count="0" />
      <LineId Id="96" Count="0" />
      <LineId Id="77" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="68" Count="3" />
      <LineId Id="67" Count="0" />
      <LineId Id="72" Count="0" />
      <LineId Id="49" Count="1" />
      <LineId Id="73" Count="0" />
      <LineId Id="93" Count="0" />
      <LineId Id="95" Count="0" />
      <LineId Id="94" Count="0" />
      <LineId Id="119" Count="0" />
      <LineId Id="118" Count="0" />
      <LineId Id="117" Count="0" />
      <LineId Id="80" Count="0" />
      <LineId Id="51" Count="2" />
      <LineId Id="19" Count="0" />
    </LineIds>
    <LineIds Name="FB_PrintModule_WEU.checkSpeed">
      <LineId Id="30" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="54" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="39" Count="0" />
      <LineId Id="55" Count="0" />
      <LineId Id="37" Count="1" />
      <LineId Id="31" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="50" Count="0" />
      <LineId Id="49" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="56" Count="1" />
      <LineId Id="46" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="44" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_PrintModule_WEU.Init">
      <LineId Id="54" Count="0" />
      <LineId Id="59" Count="8" />
      <LineId Id="96" Count="0" />
      <LineId Id="93" Count="2" />
      <LineId Id="58" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="31" Count="4" />
      <LineId Id="37" Count="0" />
      <LineId Id="52" Count="1" />
      <LineId Id="56" Count="0" />
      <LineId Id="40" Count="7" />
      <LineId Id="30" Count="0" />
      <LineId Id="123" Count="0" />
      <LineId Id="122" Count="0" />
      <LineId Id="149" Count="0" />
    </LineIds>
    <LineIds Name="FB_PrintModule_WEU.setLogLevels">
      <LineId Id="25" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="13" Count="4" />
    </LineIds>
    <LineIds Name="FB_PrintModule_WEU.SimUpdate">
      <LineId Id="12" Count="1" />
      <LineId Id="37" Count="0" />
      <LineId Id="23" Count="3" />
      <LineId Id="33" Count="0" />
      <LineId Id="27" Count="3" />
      <LineId Id="36" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="19" Count="1" />
      <LineId Id="17" Count="1" />
      <LineId Id="15" Count="0" />
      <LineId Id="7" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>