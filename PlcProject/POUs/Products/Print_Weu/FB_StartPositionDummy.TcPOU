<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="FB_StartPositionDummy" Id="{8c44436b-fdf6-4982-bb45-487571d5b646}" SpecialFunc="None">
    <Declaration><![CDATA[(*
  A start position detection function block dummy.
  A dummy implementation to simulate start triggers at desired positions.
*)
FUNCTION_BLOCK FB_StartPositionDummy EXTENDS FB_BasePrint IMPLEMENTS I_StartPosDetect, I_PrintStatusClient, I_Simulation
VAR_INPUT
  bTrigger              AT%I* : BOOL;       // (INPUT) trigger (rising edge)
  tTrigger_TimeStamp    AT%I* : T_DCTIME64; // (INPUT) rigger timerstamp
  lPositionM2                 : DINT;       // current position [SubPx]
  fSpeedM2                    : LREAL;      // current speed [m/s]
  lPositionM3                 : DINT;       // current position [SubPx]
  fSpeedM3                    : LREAL;      // current speed [m/s]
  fResolution                 : LREAL;      // current print resolution [dpi*SubPx]
  nDelayTriggerDistance       : DINT;       // distance between CreateTrigger and DelayTrigger [SubPx]
  bMachineProdSpeed           : BOOL;       // machine reached production speed
  IpFormatLength              : POINTER TO DINT;  //pointer to format length if it's not used from iJobDefinition [µm]
END_VAR

VAR
  _bSim                 : BOOL;       // simulatio mode active (PROPERTY)
  _bCreateTrigger       : BOOL;       // create new CT trigger (PROPERTY)
  _nStartPosition       : DINT;       // create position for CT (absolut) [SubPx] (PROPERTY)
  _bCreateTriggerDelay  : BOOL;       // create delayed trigger (PROPERTY)
  _nDelayStartPosition  : DINT;       // create position for CT (absolut) [SubPx] (PROPERTY)
  fb_FIFOPositions      : FB_FIFO_DINT;
  _nFIFOPositionReg     : DINT;       // FIFO position register [SubPx]
  
  // local helper
  bNewCt              : BOOL;
  tCycle              : TIME;
  tonNewSheet         : TON;
  rfTrig_NewCT        : RF_TRIG;
  rfTrig_TriggerDelay : RF_TRIG;
  iJobDefinition      : CalmarCompPrint.I_JobDefinition;
  nCalcPosition       : DINT;            (*calculated position [SubPx]*)
  nCalcPositionM3     : DINT;            (*calculated position module 3 [SubPx]*)
  nDeltaPosition      : DINT;            (*delta position [SubPx]*)
  nDeltaPositionDelay : DINT;            (*delta position [SubPx]*)
  nSheetEndPosition   : DINT;            (*sheet end position [SubPx]*)
  nPositionRegM2      : DINT;            (*register position module 2 [SubPx]*)
  nPositionRegM3      : DINT;            (*register position module 3 [SubPx]*)
  nTriggerDistance    : DINT;            (*trigger distance [SubPx]*)
  bStartTrigger       : BOOL;            (*start trigger*)
  bSimStartTrigger    : BOOL;            (*simulated start trigger*)
  bSimStartActive     : BOOL;            (*simulated start active*)
  bInhibSensor        : BOOL;            (*inhibit sensor signals, TRUE=inhibit*)
  tCurrentTimeStamp   : T_DCTIME64;      (*get current timestamp*)
  fCurrentTimeStamp   : LREAL;           (*current timestamp*)
  fSensorTimeStamp    : LREAL;           (*sensor timestamp*)
  fDeltaDistance      : LREAL;           (*distance that the substrate moved between the detection and the treatment of the information [m]*)
END_VAR

VAR PERSISTENT
  // local simulation configurations persistent
  iCreateType    : UINT := 3;   // 0,1=by input rising edge, 2=create by sheets p.m. 3=create by sheet gap  
  fSheetCycle    : REAL := 20;  // [-] sheets per minute
  fSheetGap      : REAL := 0;   // [mm] gap between two sheets
  fSheetLength   : LREAL := 500; // [mm] sheet length TODO: remove if given by job(default if not given by jobDefinition)
END_VAR

VAR CONSTANT
  sCreateTArray : ARRAY[1..3] OF STRING := ['Input Trigger', 'Cycle', 'Gap'];
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[// Create CT triggers with a given cycle (based on configuration of Simulation)

(*If Module2 is disabled copy position from Module3*)
IF lPositionM2 = 0 THEN
  lPositionM2 := lPositionM3;
END_IF
(*Set nDelayTriggerDistance to minimum of 2 * IpFormatLength*)
IF (nDelayTriggerDistance <= LREAL_TO_DINT(F_SubPixelToMeter(2 * IpFormatLength^, fResSubPx := fResolution) * 1_000_000)) THEN 
  nDelayTriggerDistance := LREAL_TO_DINT(F_SubPixelToMeter(2 * IpFormatLength^, fResSubPx := fResolution) * 1_000_000);
END_IF


IF    iCreateType = 0 OR iCreateType = 1 OR NOT _bSim THEN   
  // --> trigger by input (default)
  IF bTrigger AND NOT bInhibSensor THEN
    bStartTrigger := TRUE;
    bInhibSensor  := TRUE;

    (* Calculate the current and sensor time stamp *)
    tCurrentTimeStamp := F_GetCurDcTaskTime64();
    fCurrentTimeStamp := (ULINT_TO_LREAL(tCurrentTimeStamp )) / 1_000_000.0; (*in ms*)
    fSensorTimeStamp  := fCurrentTimeStamp;// (ULINT_TO_LREAL(tTrigger_TimeStamp)) / 1_000_000.0; (*in ms*)
    (* Treatment of the information *)
    fDeltaDistance := (fCurrentTimeStamp - fSensorTimeStamp) * 0.001 * fSpeedM2;  (*Distance that the substrate moved between the detection and the treatment of the information [m]*)
    nCalcPosition     := lPositionM2 - F_MeterToSubPixel(fPosMeter := fDeltaDistance, fResoSubPx := fResolution);
    nSheetEndPosition := nCalcPosition + F_MeterToSubPixel(fPosMeter := fSheetLength / 1000, fResoSubPx := fResolution);
  ELSE
    bStartTrigger := FALSE;
	END_IF

  bNewCt := bStartTrigger;

ELSIF iCreateType = 2 AND _bSim THEN   
  // --> trigger by sheets per minute
  tCycle := prodspeed_to_time(lCycle := fSheetCycle);
  tonNewSheet(IN := NOT tonNewSheet.Q, PT := tCycle, Q => bNewCt);
  nCalcPosition := lPositionM2;
  
ELSIF iCreateType = 3 AND _bSim THEN
  // --> trigger by sheet gap;

  // fSheetLength from other source
  IF (IpFormatLength <> 0) THEN
    fSheetLength := DINT_TO_LREAL(IpFormatLength^) / 1000; // [µm] -> [mm]
  END_IF

  //  we need current job settings
  IF fSheetLength = 0 THEN fSheetLength := 1*1000; END_IF  // set some valid size 1000mm if no job is given
  (*trigger with timer is too inaccurate!*)
  (*
  IF (fSpeed > 0) THEN
    tCycle := length_to_time(dist := (fSheetGap + fSheetLength) / 1000, speed := fSpeed); 
    tonNewSheet(IN := NOT tonNewSheet.Q, PT := tCycle, Q => bNewCt);
  END_IF
  nCalcPosition := lPosition;
  *)

  (*trigger with distances*)
  bNewCt := FALSE;
  IF NOT bMachineProdSpeed THEN
    bSimStartActive  := FALSE;
  ELSE
    nTriggerDistance := F_MeterToSubPixel(fPosMeter := (fSheetGap + fSheetLength) / 1000, fResoSubPx := fResolution);

    IF NOT bSimStartActive THEN
      bSimStartActive     := TRUE;
      nDeltaPosition      := 0;
      nDeltaPositionDelay := 0;
      nPositionRegM2      := lPositionM2;
      nPositionRegM3      := lPositionM3;
		END_IF
    nDeltaPosition      := nDeltaPosition      + (lPositionM2 - nPositionRegM2);
    nDeltaPositionDelay := nDeltaPositionDelay + (lPositionM3 - nPositionRegM3);

    IF (nDeltaPosition >= nTriggerDistance) THEN
      bNewCt          := TRUE;
      nCalcPosition   := lPositionM2 - (nDeltaPosition - nTriggerDistance);
      nCalcPositionM3 := lPositionM3 - (nDeltaPosition - nTriggerDistance);
      nDeltaPosition  := nDeltaPosition - nTriggerDistance;
    END_IF
  END_IF
ELSE
  ;  // not supported ignore
END_IF


// Module 2: set ouputs (properties)
rfTrig_NewCT(CLK := bNewCt, RT => _bCreateTrigger);    // set ouput trigger
IF _bCreateTrigger THEN 
  _nStartPosition := nCalcPosition;
END_IF

// Module 3: set ouput for delay trigger (properties)
fb_FIFOPositions( bI_Init       := NOT bMachineProdSpeed  (*OR (nDelayTriggerDistance = 0)*)
                , bI_Add        := _bCreateTrigger
                , bI_Release    := _bCreateTriggerDelay
                , nI_FIFO_Input := nCalcPositionM3);
_nDelayStartPosition := fb_FIFOPositions.nO_FIFO + nDelayTriggerDistance;
IF _nFIFOPositionReg <> fb_FIFOPositions.nO_FIFO THEN
  nDeltaPositionDelay := (lPositionM3 - fb_FIFOPositions.nO_FIFO);
END_IF
_nFIFOPositionReg := fb_FIFOPositions.nO_FIFO;

rfTrig_TriggerDelay( CLK :=     (nDeltaPositionDelay >= nDelayTriggerDistance) 
                            AND bMachineProdSpeed
                            AND (fb_FIFOPositions.nO_FIFO <> 0)
                   , RT => _bCreateTriggerDelay);    // set ouput trigger


(*stop trigger to reset bInhibSensor*)
IF (lPositionM2 >= nSheetEndPosition) AND bInhibSensor THEN
  bInhibSensor := FALSE;
END_IF;

(*register position*)
nPositionRegM2 := lPositionM2;
nPositionRegM3 := lPositionM3;
]]></ST>
    </Implementation>
    <Folder Name="I_PrintStatusClient" Id="{0f059572-48fa-432b-b785-512422fd1dfe}" />
    <Folder Name="I_Simulation" Id="{7d61ad54-78ed-4583-824e-3b28cb4bdfce}" />
    <Folder Name="I_StartPosDetect" Id="{42dcb401-5898-4788-a131-7c35bf2d9f5b}" />
    <Property Name="bSimEnable" Id="{9ad55ae0-9c7f-42e0-b227-356775d240a7}" FolderPath="I_Simulation\">
      <Declaration><![CDATA[PROPERTY bSimEnable : BOOL
]]></Declaration>
      <Get Name="Get" Id="{9bd88754-a865-4550-9123-bca0f19be00e}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[bSimEnable := _bSim;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{b66c4a74-41e4-4373-95c4-8e6dd06c2d09}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_bSim := bSimEnable;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="bStartTrig" Id="{3a919c9a-ce16-49c6-b57e-75dcd07db7d1}" FolderPath="I_StartPosDetect\">
      <Declaration><![CDATA[(*
  A new container detected.
  NOTE: a pulse only
*)
PROPERTY bStartTrig : BOOL
]]></Declaration>
      <Get Name="Get" Id="{0a392f0b-d23a-4374-a637-12c72e002d9f}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[bStartTrig := _bCreateTrigger;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="bStartTrigDelay" Id="{aee342b5-bbcd-4f3c-bf23-4e435c32d449}">
      <Declaration><![CDATA[(*
  A new container detected.
  NOTE: a pulse only
*)
PROPERTY bStartTrigDelay : BOOL
]]></Declaration>
      <Get Name="Get" Id="{9a8fba4a-7cc2-4b99-9c7d-1ec66b26b4da}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[bStartTrigDelay := _bCreateTriggerDelay;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="bValid" Id="{dd397979-b437-4cd6-bdee-6dad5733a67f}" FolderPath="I_StartPosDetect\">
      <Declaration><![CDATA[(*
  A valid container detected.
*)
PROPERTY bValid : BOOL
]]></Declaration>
      <Get Name="Get" Id="{7761d967-0a1f-4e88-ad34-4ad5ce416735}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[bValid := TRUE;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="length_to_time" Id="{6d1890ed-cd04-401d-8fa5-d36c469783e5}">
      <Declaration><![CDATA[(*
Convert a distance to time with current speed
*)
METHOD PRIVATE length_to_time : TIME
VAR_INPUT
  dist  : LREAL; // [m] distance
  speed : LREAL; // [m/s] @speet
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF speed = 0 THEN  RETURN; END_IF   // ignore if speed = 0

length_to_time := LREAL_TO_TIME((dist * 1000)/ speed);  // TIME base is in [ms]]]></ST>
      </Implementation>
    </Method>
    <Method Name="mJobStart" Id="{e393908f-23a1-4595-a465-2cf3c9f6001e}" FolderPath="I_PrintStatusClient\">
      <Declaration><![CDATA[METHOD mJobStart
VAR_INPUT
	sJobDef	: CalmarCompPrint.I_JobDefinition;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
// sample new CT configuration from job
iJobDefinition := sJobDef;    // current job definition

// fSheetLength from job definition
IF (iJobDefinition <> 0) AND (IpFormatLength = 0) THEN
  fSheetLength := iJobDefinition.fSubstrateDepth * 1000; // [m] -> [mm]
END_IF
// fSheetLength from other source
IF (IpFormatLength <> 0) THEN
  fSheetLength := DINT_TO_LREAL(IpFormatLength^) / 1000; // [µm] -> [mm]
END_IF

bInhibSensor := FALSE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="mJobStop" Id="{d8356075-2335-4b08-acc5-155ab282c68f}" FolderPath="I_PrintStatusClient\">
      <Declaration><![CDATA[METHOD mJobStop
VAR_INPUT
	sStatus	: CalmarCompPrint.I_JobStatus;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[iJobDefinition := 0;    // delete job definition]]></ST>
      </Implementation>
    </Method>
    <Method Name="mProduced" Id="{fe7716e6-798e-41d7-838b-f7b407401b42}" FolderPath="I_PrintStatusClient\">
      <Declaration><![CDATA[METHOD mProduced
VAR_INPUT
	(* current progress*)
	sProgress	: CalmarCompPrint.I_JobProgress;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[; // nothing to do]]></ST>
      </Implementation>
    </Method>
    <Property Name="nDelayStartPositionX0" Id="{a9b33575-e7bf-432d-ba6c-5b6e828f9a6b}">
      <Declaration><![CDATA[(*
  Detected start position X0 (absolute) in [SubPx].
*)
PROPERTY nDelayStartPositionX0 : DINT
]]></Declaration>
      <Get Name="Get" Id="{4569fd89-68fc-4761-87c4-331c50493a19}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[nDelayStartPositionX0 := _nDelayStartPosition;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="nStartPositionX0" Id="{6b27a535-635b-4868-a381-d2f4a2a26ba0}" FolderPath="I_StartPosDetect\">
      <Declaration><![CDATA[(*
  Detected start position X0 (absolute) in [SubPx].
*)
PROPERTY nStartPositionX0 : DINT
]]></Declaration>
      <Get Name="Get" Id="{1b86c0b7-703e-4025-917d-2f98f1c0050d}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[nStartPositionX0 := _nStartPosition;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="prodspeed_to_time" Id="{c91d715b-46ec-45b5-8769-aca2c4f1baa0}">
      <Declaration><![CDATA[(*
Convert production speed to a time. E.g. number of sheet per minute to a cycle time.
*)
METHOD PRIVATE prodspeed_to_time : TIME
VAR_INPUT
  lCycle        : REAL;    // sheets per minute
END_VAR
VAR
  fCycleTime    : LREAL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[fCycleTime := (60 / REAL_TO_LREAL(lCycle)) * 1000;
prodspeed_to_time := LREAL_TO_TIME(fCycleTime);]]></ST>
      </Implementation>
    </Method>
    <Method Name="reset" Id="{18c82145-33bc-4737-8512-a727de202b40}">
      <Declaration><![CDATA[METHOD reset
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[bSimStartActive := FALSE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="SimEnter" Id="{5f3afcf0-45e7-43f3-b7fa-173569233158}" FolderPath="I_Simulation\">
      <Declaration><![CDATA[METHOD SimEnter : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[LogInfo('Enter start position creator simulation');
_bSim := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="SimExit" Id="{48b25644-8173-4c12-af95-8aee36151a4f}" FolderPath="I_Simulation\">
      <Declaration><![CDATA[METHOD SimExit : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[LogInfo('Exit start position creator simulation');
_bSim := FALSE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="SimUpdate" Id="{8e513948-d863-4b3f-8f45-576ad340d53b}" FolderPath="I_Simulation\">
      <Declaration><![CDATA[METHOD SimUpdate : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[; // nothing to do]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_StartPositionDummy">
      <LineId Id="1228" Count="0" />
      <LineId Id="1466" Count="4" />
      <LineId Id="1475" Count="0" />
      <LineId Id="1472" Count="0" />
      <LineId Id="1476" Count="0" />
      <LineId Id="1474" Count="0" />
      <LineId Id="1471" Count="0" />
      <LineId Id="1465" Count="0" />
      <LineId Id="1229" Count="27" />
      <LineId Id="1390" Count="0" />
      <LineId Id="1392" Count="3" />
      <LineId Id="1391" Count="0" />
      <LineId Id="1257" Count="14" />
      <LineId Id="1273" Count="0" />
      <LineId Id="1388" Count="1" />
      <LineId Id="1274" Count="1" />
      <LineId Id="1603" Count="0" />
      <LineId Id="1277" Count="0" />
      <LineId Id="1539" Count="0" />
      <LineId Id="1278" Count="2" />
      <LineId Id="1602" Count="0" />
      <LineId Id="1281" Count="24" />
      <LineId Id="1307" Count="18" />
      <LineId Id="39" Count="0" />
    </LineIds>
    <LineIds Name="FB_StartPositionDummy.bSimEnable.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_StartPositionDummy.bSimEnable.Set">
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="FB_StartPositionDummy.bStartTrig.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_StartPositionDummy.bStartTrigDelay.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_StartPositionDummy.bValid.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_StartPositionDummy.length_to_time">
      <LineId Id="5" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="14" Count="0" />
    </LineIds>
    <LineIds Name="FB_StartPositionDummy.mJobStart">
      <LineId Id="8" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="28" Count="1" />
      <LineId Id="39" Count="0" />
      <LineId Id="34" Count="2" />
      <LineId Id="15" Count="1" />
    </LineIds>
    <LineIds Name="FB_StartPositionDummy.mJobStop">
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="FB_StartPositionDummy.mProduced">
      <LineId Id="8" Count="0" />
    </LineIds>
    <LineIds Name="FB_StartPositionDummy.nDelayStartPositionX0.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_StartPositionDummy.nStartPositionX0.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_StartPositionDummy.prodspeed_to_time">
      <LineId Id="5" Count="0" />
      <LineId Id="13" Count="0" />
    </LineIds>
    <LineIds Name="FB_StartPositionDummy.reset">
      <LineId Id="6" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_StartPositionDummy.SimEnter">
      <LineId Id="4" Count="1" />
    </LineIds>
    <LineIds Name="FB_StartPositionDummy.SimExit">
      <LineId Id="4" Count="1" />
    </LineIds>
    <LineIds Name="FB_StartPositionDummy.SimUpdate">
      <LineId Id="4" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>