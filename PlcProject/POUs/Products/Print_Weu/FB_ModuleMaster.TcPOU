<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="FB_ModuleMaster" Id="{d174fcea-8a30-4fbf-8484-3c054af3ade2}" SpecialFunc="None">
    <Declaration><![CDATA[(*
  This fb is the master controller of modules.
  Like an interface handler/provider for Module to Main communiation
*)
FUNCTION_BLOCK FB_ModuleMaster EXTENDS T_NamedBase IMPLEMENTS I_ModuleMaster, I_DeformationHandler, I_WorkerParams
VAR_OUTPUT
  fMasterSpeed    : LREAL;    // master speed [m/s]
  nMasterPosition : DINT;     // master position [SubPx]
END_VAR
VAR
  bInit : BOOL;
  // references
  _pPU : POINTER TO FB_PU;    // PU access
  _pProdMngr : POINTER TO FB_ProdManager_DMAX;
  _iHwPool : I_HardwarePool;  // reference of all harware
    
  // global instances
  fBCTManagerMain : FB_CTManagerDefGrid;  
  
  // print modules
  _sModules : ARRAY[1..nC_MaxModules] OF POINTER TO FB_PrintModule_Base;  // all registered print modules
  _nModules : UDINT;          // number of registered print modules
  // - active module
  _pMasterModule : POINTER TO FB_PrintModule_Base;  // current selected master module
  _iMasterPos : I_PrintPosition; // current master position interface
  _iMasterStartPosDetect : I_StartPosDetect;
  
  // helper
  iNewCt : I_CT;
  pCT : POINTER TO FB_ContainerDefGrid;
  
  // view
  nViewPmSel : UDINT := 1;  // visu pm selection
  
END_VAR
VAR CONSTANT
  nC_MaxModules : UDINT := 8;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF NOT bInit OR _pMasterModule = 0 THEN RETURN; END_IF

_iMasterPos := _pMasterModule^.iPrintPosition;
IF _iMasterPos <> 0 THEN
  nMasterPosition := _iMasterPos.getPosition();
  fMasterSpeed := _iMasterPos.getSpeed();
END_IF

// Create CT
_iMasterStartPosDetect := _pMasterModule^.iStartPos;
IF _iMasterStartPosDetect <> 0 AND_THEN _iMasterStartPosDetect.bStartTrig AND _iMasterStartPosDetect.bValid THEN
  // create new CT
  iNewCt := fBCTManagerMain.CreateCT();
  IF iNewCt <> 0 THEN 
    LogLvl(Lvl:=E_LogSeverity.Debug, Msg:=F_Concat2('CreateCT: ', TO_STRING(iNewCt.pCT^.iId)));
    pCT := fBCTManagerMain.GetContainerInstance(iCT:=iNewCt);
    IF pCT <> 0 THEN
      pCT^.LogLevel := LogLevel;            // apply module masters logLevel to CTs

      // setup new CT
      iNewCt.bProductPresent := TRUE;
      iNewCt.SetPosX0(nPosDomain:=E_PosDomain.master_pos, nXO:= _iMasterStartPosDetect.nStartPositionX0); 
      iNewCt.SetPosX0(nPosDomain:=E_PosDomain.pos_px,     nXO:= _iMasterStartPosDetect.nStartPositionX0 / FC_LREAL_TO_DINT(_iMasterPos.fSubPxResolution));
      // Production Manger
      _pProdMngr^.CT_Create(sCT := iNewCt); 
      _pProdMngr^.CT_Produce(sCT := iNewCt);   // produce this CT
      // Prepare deformation CT
      pCT^.StartScript(iDeformationHandler:=THIS^); // we do not have a script worker, just start it here
		END_IF
  END_IF
END_IF


fBCTManagerMain.nPositions[E_PosDomain.master_pos] := nMasterPosition;
fBCTManagerMain.nPositions[E_PosDomain.pos_px]     := nMasterPosition/TO_DINT(nC_SubPixelResolution);
fBCTManagerMain();

// view
nViewPmSel := TO_UDINT(LIMIT(1, TO_DINT(nViewPmSel), iCPr_NB_PM));  // limit visu selection

]]></ST>
    </Implementation>
    <Folder Name="I_DeformationHandler" Id="{c94b1ff5-fcac-4924-8128-07b634aaa60a}" />
    <Folder Name="I_ModuleMaster" Id="{96598412-2f6b-42bc-90f9-92e56d561add}" />
    <Folder Name="I_WorkerParams" Id="{31316b66-f820-49c8-a66a-6e53da4e3dec}" />
    <Method Name="DeleteCachedCt" Id="{bef7d381-99e2-4e39-ac2f-d6de948273d6}" FolderPath="I_DeformationHandler\">
      <Declaration><![CDATA[METHOD DeleteCachedCt : BOOL
VAR_INPUT
	iCT	: I_CT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[

// nothing to do or later TODO: DeleteCT in CTM?]]></ST>
      </Implementation>
    </Method>
    <Property Name="fDetectToRefPos" Id="{cb6c876d-1f5c-42e9-be16-3d4f3672f183}" FolderPath="I_WorkerParams\">
      <Declaration><![CDATA[(*
  Distance (Offset) from Master-Trigger to Master Reference Position.
  NOTE: This is normally the distance between the first (MASTER) StartPosDetection to first print Module (Printing Unit) 
*)
PROPERTY fDetectToRefPos : LREAL
]]></Declaration>
      <Get Name="Get" Id="{500509ce-0980-4371-971e-f3001eb43290}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF _pMasterModule = 0 THEN RETURN; END_IF

fDetectToRefPos := _pMasterModule^.fDetectToPm;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="fLastModuleOffset" Id="{5111f5b0-18ed-4603-99d1-ebaa433e9538}">
      <Declaration><![CDATA[(*Distance from first to last print module*)
PROPERTY fLastModuleOffset : LREAL]]></Declaration>
      <Get Name="Get" Id="{46ac00e5-4526-4392-bf1b-eb8a77007770}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[fLastModuleOffset := 1;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="iHardwarePool" Id="{a847ca78-a2f3-4e9b-8e9d-71d00c55cae8}" FolderPath="I_ModuleMaster\">
      <Declaration><![CDATA[PROPERTY iHardwarePool : I_HardwarePool
]]></Declaration>
      <Get Name="Get" Id="{d9d0d816-0eab-497b-aa8b-b6c3586e2191}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[iHardwarePool := _iHwPool;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="iMasterPrintPosition" Id="{df366969-a76e-4b45-acd7-0d54f39708ef}" FolderPath="I_ModuleMaster\">
      <Declaration><![CDATA[PROPERTY iMasterPrintPosition : I_PrintPosition
]]></Declaration>
      <Get Name="Get" Id="{986a3c62-960e-4fbd-adda-e849e845e901}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[iMasterPrintPosition := _iMasterPos;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Init" Id="{9211467c-5c9b-41c8-a36e-23ed4e2b55b2}">
      <Declaration><![CDATA[METHOD Init : BOOL
VAR_INPUT
  pPU : POINTER TO FB_PU;
  pProdMngr : POINTER TO FB_ProdManager_DMAX;
  iHwPool : I_HardwarePool;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF pPU = 0 OR pProdMngr = 0 OR iHwPool = 0 THEN LogError('init() invalid init parameter'); RETURN; END_IF

_pPU := pPU;
_pProdMngr := pProdMngr;
_iHwPool := iHwPool;

fBCTManagerMain.Init();

bInit := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Property Name="iWorkerParams" Id="{88e56e98-0c0b-49af-a0d1-a38d52309a14}" FolderPath="I_ModuleMaster\">
      <Declaration><![CDATA[PROPERTY iWorkerParams : I_WorkerParams]]></Declaration>
      <Get Name="Get" Id="{1d612bd0-3334-4f34-9bde-21f6289660a1}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[iWorkerParams := THIS^;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="pCTManager" Id="{ffdf477c-49ac-4403-a291-c9c5f531816c}" FolderPath="I_WorkerParams\">
      <Declaration><![CDATA[PROPERTY pCTManager : POINTER TO FB_CTManagerDefGrid]]></Declaration>
      <Get Name="Get" Id="{104c4da0-a148-493a-8381-b440b23d8f75}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[pCTManager := ADR(fBCTManagerMain);]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="registerModule" Id="{bdb8a126-f33d-46a0-8256-a2bbf6380b0b}">
      <Declaration><![CDATA[METHOD registerModule : BOOL
VAR_INPUT
  pModule : POINTER TO FB_PrintModule_Base;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF pModule = 0 THEN LogError('registerModule() invalid module given, ignore'); RETURN; END_IF
IF _nModules >= nC_MaxModules THEN LogError(F_Concat2('registerModule() too many already registered, ignore', pModule^.InstanceName)); RETURN; END_IF

// add new
_nModules := _nModules + 1;
_sModules[_nModules] := pModule;

// set first as master (can be changed again with a call to setMasterModule())
IF _nModules = 1 THEN setMasterModule(pModule:=pModule); END_IF  

registerModule := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="registerPuStatusClient" Id="{e2476ae7-981b-4329-bb18-d3f85fad3146}" FolderPath="I_ModuleMaster\">
      <Declaration><![CDATA[(*
  Register for PU StatusClient
*)
METHOD registerPuStatusClient : BOOL
VAR_INPUT
	sClient	: CalmarCompPrint.I_PrintStatusClient;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[registerPuStatusClient := _pPU^.registerStatusClient(sClient:=sClient);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="registerPuSubystem" Id="{359e2db7-fa5d-424c-bc4d-0ea6eff60e9a}" FolderPath="I_ModuleMaster\">
      <Declaration><![CDATA[METHOD registerPuSubystem : BOOL
VAR_INPUT
	iSubSys	: I_PrintSubsystem;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_pPU^.registerStatusClient(sClient := iSubSys);
_pPU^.registerSubystem(sSubSys:= iSubSys); 
]]></ST>
      </Implementation>
    </Method>
    <Method Name="setMasterModule" Id="{e2704455-e4dc-4ab4-9587-790388a55ee0}">
      <Declaration><![CDATA[METHOD setMasterModule : BOOL
VAR_INPUT
  pModule : POINTER TO FB_PrintModule_Base;
END_VAR
VAR
  i : UDINT;
  bFound : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// note make this a private method if MasterModule knows it modules
IF pModule = 0 THEN LogError('setMasterModule: invalid module given, ignore'); RETURN; END_IF

// search if module is registered
bFound := FALSE;
FOR i:=1 TO _nModules DO
  IF pModule = _sModules[i] THEN  // found
    bFound := TRUE; EXIT;
	END_IF
END_FOR
IF NOT bFound THEN
  LogError(F_Concat2('Could not set as master module (not registered): ', pModule^.InstanceName)); 
  RETURN; 
END_IF

_pMasterModule := pModule;]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_ModuleMaster">
      <LineId Id="158" Count="7" />
      <LineId Id="197" Count="0" />
      <LineId Id="200" Count="0" />
      <LineId Id="202" Count="0" />
      <LineId Id="213" Count="0" />
      <LineId Id="217" Count="2" />
      <LineId Id="271" Count="3" />
      <LineId Id="222" Count="4" />
      <LineId Id="229" Count="0" />
      <LineId Id="227" Count="0" />
      <LineId Id="230" Count="0" />
      <LineId Id="234" Count="1" />
      <LineId Id="215" Count="0" />
      <LineId Id="205" Count="0" />
      <LineId Id="201" Count="0" />
      <LineId Id="198" Count="0" />
      <LineId Id="166" Count="2" />
      <LineId Id="313" Count="0" />
      <LineId Id="312" Count="0" />
      <LineId Id="315" Count="0" />
      <LineId Id="314" Count="0" />
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_ModuleMaster.DeleteCachedCt">
      <LineId Id="11" Count="1" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_ModuleMaster.fDetectToRefPos.Get">
      <LineId Id="5" Count="1" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_ModuleMaster.fLastModuleOffset.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_ModuleMaster.iHardwarePool.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_ModuleMaster.iMasterPrintPosition.Get">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_ModuleMaster.Init">
      <LineId Id="5" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="19" Count="2" />
      <LineId Id="16" Count="0" />
    </LineIds>
    <LineIds Name="FB_ModuleMaster.iWorkerParams.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_ModuleMaster.pCTManager.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_ModuleMaster.registerModule">
      <LineId Id="24" Count="1" />
      <LineId Id="33" Count="0" />
      <LineId Id="26" Count="6" />
      <LineId Id="18" Count="0" />
    </LineIds>
    <LineIds Name="FB_ModuleMaster.registerPuStatusClient">
      <LineId Id="10" Count="0" />
      <LineId Id="19" Count="0" />
    </LineIds>
    <LineIds Name="FB_ModuleMaster.registerPuSubystem">
      <LineId Id="8" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="13" Count="0" />
    </LineIds>
    <LineIds Name="FB_ModuleMaster.setMasterModule">
      <LineId Id="5" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="19" Count="1" />
      <LineId Id="24" Count="1" />
      <LineId Id="21" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="29" Count="1" />
      <LineId Id="28" Count="0" />
      <LineId Id="7" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>