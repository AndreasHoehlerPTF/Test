<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="FB_WorkerDefGrid_Print_WEU" Id="{a51f391c-3039-4bd9-921c-4da39276f1e6}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_WorkerDefGrid_Print_WEU EXTENDS FB_WorkerDefGrid IMPLEMENTS I_PrintSubsystem
VAR_INPUT
  nPrintPos             : DINT;   // Absolute printing position [SubPx]
  fMasterSpeed          : LREAL;  // Speed [m/s]
  bHardwareSync         : BOOL;   // hw sync signal (chenerates a triger internally)
  bHardwareHold         : BOOL;   // hw hold signal
  fPrintStartOffset     : LREAL;  // Offset from Module reference (configurative PU/PM/PG/PA ADS offset)
  fPrintYOffset         : LREAL;  // Y-Shift
  // fine alignement live parameter
  fPUElevation          : LREAL;  // PU distance from substrate [m]
  fPUPlate1_Temperature : LREAL;  // PU Plate1 temperature
  fPUPlate2_Temperature : LREAL;  // PU Plate2 temperature
END_VAR
VAR
  // print
  // - references
  _pAdsPg            : POINTER TO ST_ADS_PG;      // pg ads reference (for pa)
  // - instances
  fbPs               : FB_PS_Grid;
  fbPa               : FB_PA;
  fB_PcAdapter       : FB_PC_Adapter;
  
  // grid specific
  // - references
  _iParamMediator    : I_ParamMediator;
  // - settings
  sDefGridSettings   : ST_DefGridSettings; 
  // - state 
  fCurrentColumnPos  : LREAL; // Currently column position
  fCurrentPreCharge  : LREAL; // Currently to be precharged
  nChargedColumns    : UDINT; // Already charged columns


  // print corrections
  // - PU Deformation/correction (4p, banana, ...)
  fbFineAlignement   : FB_FineAlignement;
  _pAdsCam           : POINTER TO ST_ADS_CAMERA;  // camera interface PUC
  // - Time of flight correction of droplets
  fbDropSpeedComp    : FB_DropSpeedComp;
  // - global shifts (applied globally and not on every single point (calcualted based on all CT points))
  _fDxGlobalShift    : LREAL;
  _fDyGlobalShift    : LREAL;

  // settings or helper
  _fPrintStartOffset : LREAL;   // internal print start offset (distance Cam -> PG1 + PG Offset + PU offset)
  _nPosX0            : DINT;    // X0 for last attached CT (detected postion)
  _nPosXS            : DINT;    // XS for last attached CT (shifted print start position)
  _nPosXDelta        : DINT;    // Shift value X0 -> XS
  _fPosY             : LREAL;   // Y shift for last attached CT
  _nPosDeltaToPrint  : DINT;    // delta pos in [SbuPx] from attach to print
  _sCurrentImgDepth  : LREAL;   // current image length [m]
  _bPaStarted        : BOOL;
  _bPaStartRequested : BOOL;
  fBStartTimeout     : TON;
  rTrigHwSync        : R_TRIG;
  _bForceDefGridOff  : BOOL;    // force deformation grid stream to ph off (send 0)
  _fPrintUnitWidth   : LREAL;   // print unit width [m]
  
  (*grid limit*)
  _fLimitCorrectionX : LREAL;     // correction limit in y (abs) [px]
  _fLimitCorrectionY : LREAL;     // correction limit in y (abs) [px]
    
  (*Messaging*)
  (*we could implement a message handler for ST_ADS_PG message interface*)
  
  (*Debug*)
  bSimPrinOk : BOOL;
  tSimPrintDone : TON;
END_VAR

VAR PERSISTENT
  _fColumnsToPrecharge : LREAL := nC_COLUMNS_TO_PRECHARGE;
  _fStartShiftOffset   : LREAL := fC_START_SHIFT_OFFSET;
  _fStartShiftFactor   : LREAL := fC_START_SHIFT_FACTOR;
END_VAR

VAR CONSTANT
  iC_NUM_MSG               : UDINT := 5;
  nC_COLUMNS_TO_PRECHARGE  : LREAL := 2.1;
  fC_GRIDPOINT_STREAM_TIME : LREAL := 0.0025;     // time to stream one point [s]
  fC_START_SHIFT_FACTOR    : LREAL := -2.4E-2;
  fC_START_SHIFT_OFFSET    : LREAL := -1.0E-2;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[(*
DOC:
What will be different to FB_WorkerDefGrid_Print of DMAX
- Re-Sync StartPosDetect interface with optional camera data (y-shift)
  Clear with Attach(), security clearance
- (maybe not needed) Stream grid faster to PC (we have no break for switching the CT in endless)
- New PDI StartPostion update (+print start only for first CT) --> send to NIOS or hw buffer
- PDI GridPoint stream
- New PDI PrintingLength update (after last streamed point)
- Other rules for Worker position calculation
*)
]]></ST>
    </Implementation>
    <Folder Name="I_PrintStatusClient" Id="{e7b8ed8a-f644-4467-ad9b-c45a3bfc8aa7}" />
    <Folder Name="I_PrintSubsystem" Id="{6caba1d4-15ea-4dff-b84f-85eedc71ff04}" />
    <Property Name="aPaState" Id="{8cd6fce7-6a00-4fb3-a4a5-292eaf4f7f86}" FolderPath="I_PrintSubsystem\">
      <Declaration><![CDATA[PROPERTY aPaState : STRING]]></Declaration>
      <Get Name="Get" Id="{770c0a62-8e79-4bff-acf2-d69ceee7eea5}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[aPaState := fbPa.aPaState;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Attach" Id="{04289869-54be-4698-97f6-46fa0259e7dd}">
      <Declaration><![CDATA[METHOD PROTECTED  Attach : BOOL
VAR_INPUT
  iCT              : I_CT;                         (*container at triggered event position*)
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Attach:=FALSE;

IF SUPER^.Attach(iCT:=iCT) THEN
  // Additional worker checks
    // - job is valid?
  IF _pAttachedCt^.pJob = 0 OR NOT _bJobActive THEN
    Release(iCT:=iCT);
    RETURN;   // do not print
  
  // CT valid & CT present
  ELSIF NOT _pAttachedCt^.bValid OR NOT _pAttachedCt^.bProductPresent THEN
    Release(iCT:=iCT);
    RETURN;   // do not print
  
  // Ignore start due to hardware hold  
  ELSIF bHardwareHold THEN
    _pAttachedCt^.setError(ErrDef:=EC_Print.ecPaAbortHold, Src:=_pEcSrc^);
    Release(iCT:=iCT);
    RETURN;   // do not print
  
  // - OK attach
  ELSE
    Attach := TRUE;
	END_IF
  
  
  //Prepare print station
  sDefGridSettings := _iParamMediator.sDeformationGridSetttings; // or get from CT (but needs to be set even if WorkerDeformation is not enabled) _pAttachedCt^.sDefGridSettings;
  // fix some potential errors
  IF sDefGridSettings.nGridPitchX = 0 THEN sDefGridSettings.nGridPitchX :=1024; LogError(F_concat2('grid not configured, set default nGridPitchX=',TO_STRING(sDefGridSettings.nGridPitchX))); END_IF
  IF sDefGridSettings.nGridPitchY = 0 THEN sDefGridSettings.nGridPitchY :=1024; LogError(F_concat2('grid not configured, set default nGridPitchY=',TO_STRING(sDefGridSettings.nGridPitchY))); END_IF
  
  nChargedColumns := 0;
  fbPs.bPrintEnable := iCT.bValid AND iCT.bProductPresent;
  fbPs.setGrid(sGrid:=sDefGridSettings);
  _fDxGlobalShift := _pAttachedCt^.fDxShift;
  _fDyGlobalShift := _pAttachedCt^.fDyShift;

  //Start print, PA should be in READY or DONE
  
  // Set X print position
  _nPosX0 :=    _pAttachedCt^.getPosX0(nPosDomain:=E_PosDomain.master_pos)
              //- General Shift
              - F_MeterToSubPixel(fbDropSpeedComp.fDropPlacementError, _fPrintResolution*_fSubPxResolution); // - drop compensation*)
  _nPosXDelta := F_MeterToSubPixel(_fPrintStartOffset, _fPrintResolution*_fSubPxResolution); // + PG/PA Shift (additional PG offset 0 for firstLine)
  
  IF GVL_Deformation.bC_UseGlobalGridShift THEN
    _nPosXDelta := _nPosXDelta + FC_LREAL_TO_DINT(_fDxGlobalShift);                  // + global shift from grid points
  END_IF

  _nPosXS := _nPosX0 + _nPosXDelta;
  fB_PcAdapter.setPrintStartPos(nX0:=_nPosXS);
  
  // Set Y print position
  _fPosY := fPrintYOffset;
  IF GVL_Deformation.bC_UseGlobalGridShift THEN
    _fPosY := _fPosY + _fDyGlobalShift;    // + global shift from grid points
  END_IF
  fB_PcAdapter.setPrintYShift(nYShift:=FC_LREAL_TO_DINT(_fPosY));

  // check
  IF _nPosXS < nPrintPos THEN
    LogWarning(Msg:='Print start position < Encoder position');
	END_IF
  
  // save current distance to print position
  _nPosDeltaToPrint := _nPosXS - iCT.GetPos(nPosDomain:=E_PosDomain.master_pos) - _nPosX0;
  checkGridTiming();
  
  IF fbPa.printStart() THEN
    _bPaStarted := FALSE;
    _bPaStartRequested := TRUE;
    Attach:=TRUE;
    LogLvl(Lvl:=E_LogSeverity.Debug, F_Concat4('printStart: at XS:', TO_STRING(_nPosXS), ' ', _pAttachedCt^.print(0)));  // print container
    IF GVL_Deformation.bC_UseGlobalGridShift THEN
      LogLvl(Lvl:=E_LogSeverity.Debug, F_Concat4(
                                          F_Concat3('> XS = X0(', TO_STRING(_pAttachedCt^.GetPosX0(nPosDomain:=E_PosDomain.master_pos)), ')'),
                                          F_Concat3(' + shDx(', TO_STRING(_fDxGlobalShift), ')'),
                                          F_Concat3(' + shStartOffs(', TO_STRING(F_MeterToSubPixel(_fPrintStartOffset,_fPrintResolution*_fSubPxResolution)), ')'),
                                          F_Concat3(' - shDropComp(', TO_STRING(F_MeterToSubPixel(fbDropSpeedComp.fDropPlacementError,_fPrintResolution*_fSubPxResolution)), ')')
                                       ));
    ELSE
      LogLvl(Lvl:=E_LogSeverity.Debug, F_Concat3(
                                          F_Concat3('> XS = X0(', TO_STRING(_pAttachedCt^.GetPosX0(nPosDomain:=E_PosDomain.master_pos)), ')'),
                                          F_Concat3(' + shStartOffs:', TO_STRING(F_MeterToSubPixel(_fPrintStartOffset,_fPrintResolution*_fSubPxResolution)), ')'),
                                          F_Concat3( ' - shDropComp:', TO_STRING(F_MeterToSubPixel(fbDropSpeedComp.fDropPlacementError,_fPrintResolution*_fSubPxResolution)), ')')
                                       ));
		END_IF
  ELSE  
    LogError(Msg:='PA not ready to start at attach');
    Release(iCT := iCT);
	END_IF
  
ELSE
  // parent attach failed case
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="bPausePrintCanEx" Id="{90a0cfcd-d04f-44f8-8556-390310f6346d}" FolderPath="I_PrintSubsystem\">
      <Declaration><![CDATA[PROPERTY bPausePrintCanEx : BOOL
]]></Declaration>
      <Get Name="Get" Id="{c2aceddc-dd50-49ed-8b3e-551468a705b8}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[bPausePrintCanEx := FALSE; //Not implemented]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="bPcEnabled" Id="{7e86c0b9-f8cf-4434-9add-45495a769294}" FolderPath="I_PrintSubsystem\">
      <Declaration><![CDATA[PROPERTY bPcEnabled : BOOL
]]></Declaration>
      <Get Name="Get" Id="{71f8a8db-9bcc-441f-a75b-c719625a0bf4}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[bPcEnabled := fB_PcAdapter.bPcEnable;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="bPrintEnabled" Id="{08effb3f-d924-408a-941d-ff2b13a9a83e}" FolderPath="I_PrintSubsystem\">
      <Declaration><![CDATA[PROPERTY bPrintEnabled : BOOL
]]></Declaration>
      <Get Name="Get" Id="{0711cb07-c232-47ba-a2f6-9293867dfecf}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[bPrintEnabled := _bEnable;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="bPrintError" Id="{7093e9ca-6584-42d4-86f4-897ee7f3c2d8}" FolderPath="I_PrintSubsystem\">
      <Declaration><![CDATA[PROPERTY bPrintError : BOOL
]]></Declaration>
      <Get Name="Get" Id="{92d6f28b-8c51-4dde-b836-d1c779011e1f}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[bPrintError := bError; // Worker error 
                  // or fB_PcAdapter.bError]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="bPrinting" Id="{ada463a7-669b-43d2-b48c-8fd4f72b7fbc}" FolderPath="I_PrintSubsystem\">
      <Declaration><![CDATA[PROPERTY bPrinting : BOOL
]]></Declaration>
      <Get Name="Get" Id="{17171856-ee80-4eb4-bc57-ce5faab30d99}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[bPrinting := fbPa.bPrinting;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="bPrintReady" Id="{4e6bc301-4620-4318-89c9-ab4150116aea}" FolderPath="I_PrintSubsystem\">
      <Declaration><![CDATA[PROPERTY bPrintReady : BOOL
]]></Declaration>
      <Get Name="Get" Id="{7704a91a-fa13-46ae-ab5b-e4d9875d106b}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[bPrintReady := fbPa.bReady;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="bStartPrintCanEx" Id="{113bf46a-17a0-4262-aeb3-2210e7d207b3}" FolderPath="I_PrintSubsystem\">
      <Declaration><![CDATA[PROPERTY bStartPrintCanEx : BOOL
]]></Declaration>
      <Get Name="Get" Id="{b1e937bf-f460-408f-88da-2672d9b61adc}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[bStartPrintCanEx := fbPa.bStartCanEx;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="bStopPrintCanEx" Id="{a62f9288-4559-4001-90c5-02b46605889a}" FolderPath="I_PrintSubsystem\">
      <Declaration><![CDATA[PROPERTY bStopPrintCanEx : BOOL
]]></Declaration>
      <Get Name="Get" Id="{16ab9ebf-f44a-40a5-bbfb-aaf539ba6362}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[bStopPrintCanEx := fbPa.bStopCanEx;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="bWorkerEnable" Id="{671684a2-d248-4dc0-bd0b-0fe74a1f3006}">
      <Declaration><![CDATA[{attribute 'monitoring':='call'}
PROPERTY bWorkerEnable : BOOL]]></Declaration>
      <Get Name="Get" Id="{091237bc-ae12-4dc9-a493-c0a6c2dac5b7}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[bWorkerEnable := SUPER^.bWorkerEnable;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{3d6b8fca-3946-4af7-b7c7-9f16646edacf}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF _pAdsPg = 0 THEN
  SUPER^.bWorkerEnable := bWorkerEnable;
ELSE
  // mask worker enable with group enable
  SUPER^.bWorkerEnable := bWorkerEnable AND _pAdsPg^.bI_Enable;  
END_IF
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="checkGridTiming" Id="{82d69843-5ea3-4291-ac3c-a02d205e898c}">
      <Declaration><![CDATA[METHOD PRIVATE checkGridTiming : BOOL
VAR
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// check for timing problems
IF fMasterSpeed <> 0 THEN

  // - check pre-charge at beginning
  IF _fColumnsToPrecharge * fC_GRIDPOINT_STREAM_TIME * GVL_Deformation.nC_GridRoiRows >= F_SubPixelToMeter(lPosSubPx:=_nPosDeltaToPrint, fResSubPx:=_fPrintResolution*_fSubPxResolution) / fMasterSpeed  THEN
       LogError('Machine too fast for grid stream (for pre-charge at attach)');
  END_IF
  
 // - check charge time needed per columns vs machine speed and grid-sizeY
 IF GVL_Deformation.nC_GridRoiRows * fC_GRIDPOINT_STREAM_TIME >= F_SubPixelToMeter(lPosSubPx:=TO_DINT(sDefGridSettings.nGridPitchX), fResSubPx:=_fPrintResolution) / fMasterSpeed THEN
   LogError('Machine too fast for grid stream (time rows per column)');
 END_IF

END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="correctionLimit" Id="{9e9550be-5844-456c-8fe6-7fcc69bb324c}">
      <Declaration><![CDATA[(*
  Limit correction to boundaries
  :return: TRUE if limited
*)
METHOD PRIVATE correctionLimit : BOOL
VAR_INPUT
  pPoint : POINTER TO ST_DeformationPointAccurate;
END_VAR
VAR
  bLimited : BOOL;
  nExeedX, nExeedY : LREAL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// limit point correction to boundaries and inform
IF    pPoint^.dx >= _fLimitCorrectionX    THEN nExeedX := pPoint^.dx; pPoint^.dx := _fLimitCorrectionX;    bLimited:=TRUE; 
ELSIF pPoint^.dx <= -1*_fLimitCorrectionX THEN nExeedX := pPoint^.dx; pPoint^.dx := -1*_fLimitCorrectionX; bLimited:=TRUE;
ELSIF pPoint^.dy >= _fLimitCorrectionY    THEN nExeedY := pPoint^.dy; pPoint^.dy := _fLimitCorrectionY;    bLimited:=TRUE;
ELSIF pPoint^.dy <= -1*_fLimitCorrectionY THEN nExeedY := pPoint^.dy; pPoint^.dy := -1*_fLimitCorrectionY; bLimited:=TRUE;
END_IF
IF bLimited THEN 
  LogLvl(Lvl:=E_LogSeverity.Warning, Msg:=F_Concat5( 'Point=',TO_STRING(pPoint^.index),
                                                     F_Concat5(' c:r(',TO_STRING(pPoint^.col),'/',TO_STRING(pPoint^.row), ') '),
                                                     F_Concat4('dx:', TO_STRING(nExeedX), ' dy:', TO_STRING(nExeedY)),
                                                     ' correction exceeded limit')); 
END_IF
correctionLimit := bLimited;]]></ST>
      </Implementation>
    </Method>
    <Method Name="correctionUpdate" Id="{14cecb46-16e0-4f17-918f-ce5692924079}">
      <Declaration><![CDATA[METHOD PRIVATE correctionUpdate : BOOL
VAR_INPUT
  pPoint : POINTER TO ST_DeformationPointAccurate;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
// here apply all PU specific corrections
// - mechanical stretch based on temperature extension (if not done in Camera)
// - banana correction
// - Y-shifts of PU
// - trapzedoial correction
// - ...

// global dx/dy correction
//   remove global shift from GridPoints (shifted by PU)
IF GVL_Deformation.bC_UseGlobalGridShift THEN
  pPoint^.dx := pPoint^.dx - _fDxGlobalShift;
  pPoint^.dy := pPoint^.dy - _fDyGlobalShift;
END_IF

// PU Deformation correction
IF GVL_Deformation.bC_UsePUDeformation THEN
  fbFineAlignement.updateCorrection(pPoint:=pPoint);
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Property Name="fMaxSpeed" Id="{e93ac3c2-7afb-43cc-a5a4-ff642c3d646c}">
      <Declaration><![CDATA[(*
  Max. supported speed [m/s], 0 if not available
*)
{attribute 'monitoring':='call'}
PROPERTY fMaxSpeed : LREAL]]></Declaration>
      <Get Name="Get" Id="{950b9b28-2b18-46b2-acf5-2db9b914a945}">
        <Declaration><![CDATA[VAR
  nSpeedMpMin : DINT;
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[nSpeedMpMin := SEL(bWorkerEnable AND _pAdsPg <> 0, 0, _pAdsPg^.sI_MaxPrintSpeed.lI_Val);
fMaxSpeed := TO_LREAL(nSpeedMpMin)/60;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="fStartShiftFactor" Id="{76fc8cfe-283f-4ec4-a887-b19a187f997f}">
      <Declaration><![CDATA[{attribute 'monitoring':='call'}
PROPERTY fStartShiftFactor : LREAL]]></Declaration>
      <Get Name="Get" Id="{190c48b1-4bf5-49c7-9e8c-05ddb0715765}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[fStartShiftFactor := _fStartShiftFactor;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{cf520747-e9c6-4c48-9245-8466cce47ffc}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_fStartShiftFactor := fStartShiftFactor;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="fStartShiftOffset" Id="{b4313e10-b46d-4236-a465-4c511fe68aa8}">
      <Declaration><![CDATA[{attribute 'monitoring':='call'}
PROPERTY fStartShiftOffset : LREAL]]></Declaration>
      <Get Name="Get" Id="{c259f77b-dbd1-44c9-aad3-424b6b4371d0}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[fStartShiftOffset := _fStartShiftOffset;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{9edee42a-9a9a-460f-9332-fa95a49308cd}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_fStartShiftOffset := fStartShiftOffset;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="gridUpdate" Id="{bdd499b9-f393-484d-a6e4-c9de3446cbae}">
      <Declaration><![CDATA[METHOD PROTECTED gridUpdate : BOOL
VAR_INPUT
  bEnableDeformation : BOOL;      // enable correction update, else correction (0/0) is written
END_VAR
VAR
  sPoint : ST_DeformationPointAccurate;
  nRow : UDINT;
  nAvailPoints : UDINT;
  nConvErr : UDINT;
END_VAR
VAR_INST
  nAvailPoints_mem : UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//TODO: rewrite this method to look cleaner (less if else)
IF sDefGridSettings.nGridSizeX = 0 THEN RETURN; END_IF          // avoid endless loops
IF sDefGridSettings.nGridSizeY = 0 THEN RETURN; END_IF

gridUpdate:=TRUE;

// calculate grid column position
IF sDefGridSettings.nGridPitchX <> 0 THEN
  fCurrentColumnPos := fCtPosition / (sDefGridSettings.nGridPitchX * _fSubPxResolution);   // calc grid column position relative to worker
END_IF

//Check for next correction update 
IF fCurrentColumnPos + _fColumnsToPrecharge > nChargedColumns AND nChargedColumns <= sDefGridSettings.nGridSizeX THEN
  IF bEnableDeformation THEN 
    // sync deformation points
    fCurrentPreCharge := fCurrentColumnPos + _fColumnsToPrecharge;
    WHILE FLOOR(fCurrentPreCharge) > nChargedColumns AND nChargedColumns <= sDefGridSettings.nGridSizeX DO
      nAvailPoints := _pAttachedCt^.nAvailableGridPoints;
      IF nAvailPoints >= sDefGridSettings.nGridSizeY * (nChargedColumns+1) THEN // Complete column available?
        nAvailPoints_mem := 0;
        LogLvl(Lvl:=E_LogSeverity.Debug, Msg:=F_Concat2('Charge CG col: ',TO_STRING(nChargedColumns)));
        FOR nRow := 0 TO sDefGridSettings.nGridSizeY - 1 DO
          // get points
          IF _pAttachedCt^.getDeformationPoint(nCol:=nChargedColumns, nRow:=nRow, sPoint => sPoint) THEN
            // transfer the displacement into a correction
            sPoint.dx := sPoint.dx;   // nothing to change
            sPoint.dy := sPoint.dy;
            
            // apply PU corrections
            correctionUpdate(pPoint:=ADR(sPoint));
            
            // correction limitation
            correctionLimit(pPoint:=ADR(sPoint));
            
            // send point
            IF NOT fbPs.newGridPoint(sPoint:=sPoint) THEN
               LogError(Msg:='stream new point failed');
               gridUpdate:=FALSE;
               RETURN;
            END_IF
          ELSE
            LogError(Msg:='get new grid point failed');
            gridUpdate:=FALSE;
          END_IF
        END_FOR
        
        nChargedColumns := nChargedColumns + 1;
      ELSE
        IF nAvailPoints > nAvailPoints_mem THEN // log once or after every update of new available poinst
          LogError(Msg:='point column expected but not available');
        END_IF
        nAvailPoints_mem := nAvailPoints;
        gridUpdate:=FALSE;
        RETURN;
      END_IF 
    END_WHILE
  ELSE
    // send points with no deformation
      FOR nRow := 0 TO sDefGridSettings.nGridSizeY - 1 DO
        MEMSET(destAddr:=ADR(sPoint), fillByte:=0, n:=SIZEOF(sPoint));
        sPoint.col := TO_DINT(nChargedColumns);
        sPoint.row := TO_DINT(nRow);
        IF NOT fbPs.newGridPoint(sPoint:=sPoint) THEN
           LogError(Msg:='stream new point failed');
           gridUpdate:=FALSE;
           RETURN;
        END_IF
    END_FOR
    nChargedColumns := nChargedColumns + 1;
	END_IF
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="InitWorkerPrint" Id="{725b4782-e9a9-4287-9bbe-5c631e47969c}">
      <Declaration><![CDATA[METHOD InitWorkerPrint : BOOL
VAR_INPUT
  pAdsPg                : POINTER TO ST_ADS_PG;       // pg ads reference (worker prints ads)
  pAdsIfCam             : POINTER TO ST_ADS_CAMERA;   // provide camera access
  iDefGridParamMediator : I_ParamMediator;            // for deformation settings
  fPrintUnitWidth       : LREAL;                      // print unit width [m]
  fLimitCorrectionX     : LREAL;                      // correction limit in y (abs) [px]
  fLimitCorrectionY     : LREAL;                      // correction limit in y (abs) [px]
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT bInitialized            THEN LogError('Base Worker not initialized! call init() before'); RETURN; END_IF
IF pAdsIfCam = 0 OR pAdspg = 0 THEN LogError('InitWorkerPrint: invalid parameter proviced'); RETURN; END_IF
IF iDefGridParamMediator = 0   THEN bInitialized := FALSE; LogError('Invalid parameter, no valid param mediator'); RETURN; END_IF

// Worker specific init
_pAdsPg := pAdsPg;
_pAdsCam := pAdsIfCam;
_iParamMediator := iDefGridParamMediator;

_fPrintUnitWidth   := fPrintUnitWidth;
_fLimitCorrectionX := ABS(fLimitCorrectionX);
_fLimitCorrectionY := ABS(fLimitCorrectionY);

// Print Aggregate
fbPa.bSyncAfterDone := FALSE;
fbPa.init(iPcAdapter := fB_PcAdapter, iPsInterface := fbPs);

fbFineAlignement.init(pAdsCam := _pAdsCam, fPxReso := _fPrintResolution, fPuWidth := fPrintUnitWidth);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="mJobPause" Id="{94f00e92-8a20-43a9-9616-e560f3ba3770}" FolderPath="I_PrintStatusClient\">
      <Declaration><![CDATA[METHOD mJobPause
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="mJobStart" Id="{89edfdce-4466-46a7-a112-cf11e587d110}" FolderPath="I_PrintStatusClient\">
      <Declaration><![CDATA[METHOD   mJobStart
VAR_INPUT
	sJobDef	: CalmarCompPrint.I_JobDefinition;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Config workers static variables
_fCtSecurityReleasePos := F_MeterToSubPixel(fPosMeter:=sJobDef.fImageDepth/1000 + fC_MIN_SHEET_GAP, fResoSubPx:=_fPrintResolution*_fSubPxResolution);

IF NOT bWorkerEnable THEN RETURN; END_IF  // only if enabled

fbPa.jobStart();

_sCurrentImgDepth := sJobDef.fImageDepth/1000;

// set correction ref points
_pAdsCam^.sI_CorrectionPointIndication[1].posx := 0;
_pAdsCam^.sI_CorrectionPointIndication[1].posy := LREAL_TO_REAL(((_fPrintUnitWidth * 1000) - sJobDef.fImageWidth) / 2);
_pAdsCam^.sI_CorrectionPointIndication[2].posx := LREAL_TO_REAL(sJobDef.fImageDepth);
_pAdsCam^.sI_CorrectionPointIndication[2].posy := LREAL_TO_REAL(((_fPrintUnitWidth * 1000) - sJobDef.fImageWidth) / 2);
_pAdsCam^.sI_CorrectionPointIndication[3].posx := 0;
_pAdsCam^.sI_CorrectionPointIndication[3].posy := LREAL_TO_REAL((((_fPrintUnitWidth * 1000) - sJobDef.fImageWidth) / 2) + sJobDef.fImageWidth);
_pAdsCam^.sI_CorrectionPointIndication[4].posx := LREAL_TO_REAL(sJobDef.fImageDepth);
_pAdsCam^.sI_CorrectionPointIndication[4].posy := LREAL_TO_REAL((((_fPrintUnitWidth * 1000) - sJobDef.fImageWidth) / 2) + sJobDef.fImageWidth);

_bJobActive := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="mJobStop" Id="{05477037-33e9-4fec-9299-59aab145ce38}" FolderPath="I_PrintStatusClient\">
      <Declaration><![CDATA[METHOD  mJobStop
VAR_INPUT
	sStatus	: CalmarCompPrint.I_JobStatus;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fbPa.jobStop();
_bJobActive := FALSE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="mProduced" Id="{09c64151-c707-4a94-bc62-7cee61472f96}" FolderPath="I_PrintStatusClient\">
      <Declaration><![CDATA[METHOD mProduced
VAR_INPUT
	(* current progress*)
	sProgress	: CalmarCompPrint.I_JobProgress;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="registerPc" Id="{4776f3c2-c3e1-4f90-b8f6-3a06b4691e15}">
      <Declaration><![CDATA[METHOD registerPc : BOOL
VAR_INPUT
  iNewPC : I_PC;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[registerPc := fB_PcAdapter.registerPc(iNewPC := iNewPC);]]></ST>
      </Implementation>
    </Method>
    <Method Name="registerPh" Id="{6c4c9059-69e5-4f42-ba66-a286f447450f}">
      <Declaration><![CDATA[METHOD registerPh : BOOL
VAR_INPUT
    iPH : I_PH;
    iNewCG : I_Correction_Grid;   // correction grid interface
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Attach head to print station
IF iPH <> 0 THEN
  fbPs.registerCG(iNewPh:=iPH, iNewCG:=iNewCG);
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="updateWorkerPosition" Id="{5207464a-bb68-4cfe-bdd9-989eb1679161}">
      <Declaration><![CDATA[METHOD PRIVATE updateWorkerPosition
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Update only without attached container
IF _pAttachedCt = 0 THEN RETURN; END_IF

//Start offset update
IF _fPrintStartOffset <> (fPrintStartOffset + _iWorkerParams.fDetectToRefPos) THEN //Worker position changed
  _fPrintStartOffset :=fPrintStartOffset + _iWorkerParams.fDetectToRefPos;
END_IF

//Worker position update
IF _fWorkerPosition <> (_fPrintStartOffset + (_fStartShiftOffset + _fStartShiftFactor * fMasterSpeed)) THEN //Worker position changed (camera settings change)
  // WorkerPosition = PrintStart offset - pre-start offset
  fPosition := _fPrintStartOffset + (_fStartShiftOffset + _fStartShiftFactor * fMasterSpeed);
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="work" Id="{67970e4d-2ad9-4f9e-8bde-95cb4f3188e8}">
      <Declaration><![CDATA[METHOD  work
VAR
  bDeformErr : BOOL;
  nDeformStep : E_DeformationStep;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _iWorkerParams = 0 OR _iParamMediator = 0 THEN F_Report_Error(ErrType:=EN_REPORT_ERROR_TYPE.Report_Error_0Pointer); RETURN; END_IF
bError := FALSE; nError := 0;

updateWorkerPosition();  // calculate and set worker position

SUPER^.work();

(*PU correction*)
IF GVL_Deformation.bC_UsePUDeformation THEN
  fbFineAlignement.fT_PL1 := fPUPlate1_Temperature;
  fbFineAlignement.fT_PL2 := fPUPlate2_Temperature;
  fbFineAlignement();
END_IF

(*Print correction*)
fbDropSpeedComp(fMasterSpeed:=fMasterSpeed, fDropTravelDistance:=fPUElevation);


(*Update virtual encoder on all controller boards*)
fB_PcAdapter.setEncoderPos(nPrintPos);
fB_PcAdapter();

(*Call print aggregate*)
rTrigHwSync(CLK:=bHardwareSync); 
IF rTrigHwSync.Q THEN fbPa.sync(); END_IF   // external sync
fbPa.bHold := bHardwareHold;              // external hw hold
fbPa();

fBStartTimeout(IN:=_bPaStartRequested, PT := T#60MS);

IF _pAttachedCt <> 0 AND bWorkerEnable THEN // Work only with attached container
  
  // check for generic error
  IF _pAttachedCt^.bValid AND bHardwareHold THEN
    // abort during printing
    _pAttachedCt^.setError(ErrDef:=EC_Print.ecPaAbortHold, Src:=_pEcSrc^);
  END_IF

  // Grid update
  bDeformErr := _pAttachedCt^.getDeformationStatus(eDStep=>nDeformStep);
  
  IF NOT bDeformErr AND nDeformStep >= E_DeformationStep.gridStarted AND NOT _bForceDefGridOff THEN 
    IF NOT gridUpdate(bEnableDeformation:=TRUE) THEN
      _pAttachedCt^.AbortDeformation(sReason:='deformation point update failed', Src:=_pEcSrc^);
    END_IF
  ELSE
    // not started or error already --> erase deformation points and send no correction points
    gridUpdate(bEnableDeformation:=FALSE);
  END_IF

  // PA control
  IF _bPaStartRequested THEN
    IF fbPa.bPrinting THEN
      _bPaStarted := TRUE;
      _bPaStartRequested := FALSE;
    ELSIF fBStartTimeout.Q THEN //Stop print at timeout to make ready for next container
      _bPaStarted := FALSE;
      _bPaStartRequested := FALSE;
      IF NOT bSimPrinOk THEN
        fbPa.printStop();
        _pAttachedCt^.setError(ErrDef:=EC_Print.ecPaStartErr, Src:=_pEcSrc^);
        Release(_pAttachedCt^);
      END_IF
		END_IF
  ELSIF _bPaStarted THEN
    //Release container when all points have been processed
    IF fbPa.bDone OR fbPa.bStop OR tSimPrintDone.Q THEN
      _bPaStarted := FALSE;
      Release(_pAttachedCt^);
    (*ELSIF fbpa.bError THEN
      _pAttachedCt^.setError(ErrDef:=EC_Print.ecPaPrintErr, Ident:=0);
      Release(_pAttachedCt^);*)
    END_IF 
	END_IF
END_IF  


// forward pa state to pg ads
IF _pAdsPg <> 0 THEN
  _pAdsPg^.aO_State := fbPa.aPaState;
  _pAdsPg^.lO_Error := nError; 
  _pAdsPg^.bO_Error := bError;
END_IF

// logging config
fbPa.LogLevel := LogLevel;
fB_PcAdapter.LogLevel := LogLevel;
IF bSimPrinOk THEN tSimPrintDone(IN:=_bPaStarted, PT:=_sCurrentImgDepth/); END_IF
]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_WorkerDefGrid_Print_WEU">
      <LineId Id="550" Count="9" />
      <LineId Id="562" Count="0" />
      <LineId Id="78" Count="0" />
    </LineIds>
    <LineIds Name="FB_WorkerDefGrid_Print_WEU.aPaState.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_WorkerDefGrid_Print_WEU.Attach">
      <LineId Id="26" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="157" Count="0" />
      <LineId Id="159" Count="1" />
      <LineId Id="158" Count="0" />
      <LineId Id="175" Count="0" />
      <LineId Id="179" Count="1" />
      <LineId Id="171" Count="0" />
      <LineId Id="176" Count="2" />
      <LineId Id="211" Count="0" />
      <LineId Id="207" Count="0" />
      <LineId Id="275" Count="0" />
      <LineId Id="209" Count="0" />
      <LineId Id="208" Count="0" />
      <LineId Id="163" Count="0" />
      <LineId Id="210" Count="0" />
      <LineId Id="164" Count="0" />
      <LineId Id="167" Count="0" />
      <LineId Id="162" Count="0" />
      <LineId Id="168" Count="0" />
      <LineId Id="311" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="310" Count="0" />
      <LineId Id="305" Count="2" />
      <LineId Id="312" Count="0" />
      <LineId Id="330" Count="0" />
      <LineId Id="46" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="191" Count="1" />
      <LineId Id="44" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="105" Count="0" />
      <LineId Id="63" Count="0" />
      <LineId Id="221" Count="0" />
      <LineId Id="286" Count="0" />
      <LineId Id="284" Count="0" />
      <LineId Id="116" Count="0" />
      <LineId Id="295" Count="0" />
      <LineId Id="224" Count="1" />
      <LineId Id="222" Count="0" />
      <LineId Id="254" Count="0" />
      <LineId Id="223" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="127" Count="0" />
      <LineId Id="104" Count="0" />
      <LineId Id="226" Count="0" />
      <LineId Id="228" Count="1" />
      <LineId Id="227" Count="0" />
      <LineId Id="195" Count="0" />
      <LineId Id="190" Count="0" />
      <LineId Id="58" Count="3" />
      <LineId Id="263" Count="3" />
      <LineId Id="29" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="74" Count="0" />
      <LineId Id="73" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="121" Count="0" />
      <LineId Id="238" Count="0" />
      <LineId Id="316" Count="5" />
      <LineId Id="239" Count="0" />
      <LineId Id="323" Count="3" />
      <LineId Id="322" Count="0" />
      <LineId Id="241" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="72" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="174" Count="0" />
      <LineId Id="173" Count="0" />
      <LineId Id="172" Count="0" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="FB_WorkerDefGrid_Print_WEU.bPausePrintCanEx.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_WorkerDefGrid_Print_WEU.bPcEnabled.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_WorkerDefGrid_Print_WEU.bPrintEnabled.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_WorkerDefGrid_Print_WEU.bPrintError.Get">
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_WorkerDefGrid_Print_WEU.bPrinting.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_WorkerDefGrid_Print_WEU.bPrintReady.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_WorkerDefGrid_Print_WEU.bStartPrintCanEx.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_WorkerDefGrid_Print_WEU.bStopPrintCanEx.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_WorkerDefGrid_Print_WEU.bWorkerEnable.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_WorkerDefGrid_Print_WEU.bWorkerEnable.Set">
      <LineId Id="6" Count="1" />
      <LineId Id="9" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_WorkerDefGrid_Print_WEU.checkGridTiming">
      <LineId Id="6" Count="0" />
      <LineId Id="16" Count="1" />
      <LineId Id="7" Count="3" />
      <LineId Id="22" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="13" Count="2" />
      <LineId Id="18" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_WorkerDefGrid_Print_WEU.correctionLimit">
      <LineId Id="5" Count="0" />
      <LineId Id="11" Count="6" />
      <LineId Id="34" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="27" Count="0" />
    </LineIds>
    <LineIds Name="FB_WorkerDefGrid_Print_WEU.correctionUpdate">
      <LineId Id="6" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="7" Count="4" />
      <LineId Id="40" Count="0" />
      <LineId Id="39" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="30" Count="0" />
    </LineIds>
    <LineIds Name="FB_WorkerDefGrid_Print_WEU.fMaxSpeed.Get">
      <LineId Id="2" Count="0" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="FB_WorkerDefGrid_Print_WEU.fStartShiftFactor.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_WorkerDefGrid_Print_WEU.fStartShiftFactor.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_WorkerDefGrid_Print_WEU.fStartShiftOffset.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_WorkerDefGrid_Print_WEU.fStartShiftOffset.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_WorkerDefGrid_Print_WEU.gridUpdate">
      <LineId Id="295" Count="1" />
      <LineId Id="298" Count="0" />
      <LineId Id="297" Count="0" />
      <LineId Id="165" Count="0" />
      <LineId Id="239" Count="0" />
      <LineId Id="238" Count="0" />
      <LineId Id="235" Count="1" />
      <LineId Id="166" Count="0" />
      <LineId Id="249" Count="0" />
      <LineId Id="167" Count="3" />
      <LineId Id="250" Count="0" />
      <LineId Id="171" Count="5" />
      <LineId Id="214" Count="0" />
      <LineId Id="177" Count="0" />
      <LineId Id="229" Count="0" />
      <LineId Id="234" Count="0" />
      <LineId Id="231" Count="1" />
      <LineId Id="215" Count="0" />
      <LineId Id="178" Count="0" />
      <LineId Id="278" Count="2" />
      <LineId Id="233" Count="0" />
      <LineId Id="216" Count="0" />
      <LineId Id="179" Count="34" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_WorkerDefGrid_Print_WEU.InitWorkerPrint">
      <LineId Id="7" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="67" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="80" Count="1" />
      <LineId Id="10" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="79" Count="0" />
      <LineId Id="78" Count="0" />
      <LineId Id="12" Count="2" />
      <LineId Id="5" Count="0" />
      <LineId Id="48" Count="0" />
    </LineIds>
    <LineIds Name="FB_WorkerDefGrid_Print_WEU.mJobPause">
      <LineId Id="4" Count="0" />
    </LineIds>
    <LineIds Name="FB_WorkerDefGrid_Print_WEU.mJobStart">
      <LineId Id="87" Count="1" />
      <LineId Id="86" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="53" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="105" Count="0" />
      <LineId Id="104" Count="0" />
      <LineId Id="94" Count="0" />
      <LineId Id="96" Count="7" />
      <LineId Id="93" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="81" Count="0" />
    </LineIds>
    <LineIds Name="FB_WorkerDefGrid_Print_WEU.mJobStop">
      <LineId Id="6" Count="0" />
      <LineId Id="11" Count="0" />
    </LineIds>
    <LineIds Name="FB_WorkerDefGrid_Print_WEU.mProduced">
      <LineId Id="8" Count="0" />
    </LineIds>
    <LineIds Name="FB_WorkerDefGrid_Print_WEU.registerPc">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_WorkerDefGrid_Print_WEU.registerPh">
      <LineId Id="8" Count="0" />
      <LineId Id="10" Count="2" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_WorkerDefGrid_Print_WEU.updateWorkerPosition">
      <LineId Id="23" Count="0" />
      <LineId Id="21" Count="1" />
      <LineId Id="7" Count="1" />
      <LineId Id="10" Count="0" />
      <LineId Id="12" Count="3" />
      <LineId Id="17" Count="1" />
      <LineId Id="20" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_WorkerDefGrid_Print_WEU.work">
      <LineId Id="378" Count="0" />
      <LineId Id="365" Count="1" />
      <LineId Id="381" Count="0" />
      <LineId Id="380" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="308" Count="0" />
      <LineId Id="307" Count="0" />
      <LineId Id="305" Count="0" />
      <LineId Id="318" Count="1" />
      <LineId Id="311" Count="0" />
      <LineId Id="267" Count="0" />
      <LineId Id="362" Count="0" />
      <LineId Id="360" Count="0" />
      <LineId Id="118" Count="0" />
      <LineId Id="361" Count="0" />
      <LineId Id="359" Count="0" />
      <LineId Id="116" Count="1" />
      <LineId Id="115" Count="0" />
      <LineId Id="148" Count="0" />
      <LineId Id="147" Count="0" />
      <LineId Id="280" Count="1" />
      <LineId Id="278" Count="0" />
      <LineId Id="146" Count="0" />
      <LineId Id="168" Count="0" />
      <LineId Id="167" Count="0" />
      <LineId Id="20" Count="1" />
      <LineId Id="190" Count="0" />
      <LineId Id="326" Count="0" />
      <LineId Id="328" Count="0" />
      <LineId Id="330" Count="0" />
      <LineId Id="327" Count="0" />
      <LineId Id="329" Count="0" />
      <LineId Id="325" Count="0" />
      <LineId Id="44" Count="0" />
      <LineId Id="200" Count="0" />
      <LineId Id="352" Count="0" />
      <LineId Id="201" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="99" Count="0" />
      <LineId Id="98" Count="0" />
      <LineId Id="221" Count="2" />
      <LineId Id="149" Count="0" />
      <LineId Id="353" Count="0" />
      <LineId Id="268" Count="0" />
      <LineId Id="150" Count="1" />
      <LineId Id="156" Count="1" />
      <LineId Id="153" Count="0" />
      <LineId Id="158" Count="1" />
      <LineId Id="382" Count="0" />
      <LineId Id="160" Count="0" />
      <LineId Id="336" Count="0" />
      <LineId Id="180" Count="0" />
      <LineId Id="383" Count="0" />
      <LineId Id="154" Count="0" />
      <LineId Id="161" Count="0" />
      <LineId Id="164" Count="1" />
      <LineId Id="171" Count="0" />
      <LineId Id="166" Count="0" />
      <LineId Id="337" Count="0" />
      <LineId Id="339" Count="0" />
      <LineId Id="338" Count="0" />
      <LineId Id="163" Count="0" />
      <LineId Id="152" Count="0" />
      <LineId Id="55" Count="0" />
      <LineId Id="292" Count="0" />
      <LineId Id="372" Count="0" />
      <LineId Id="367" Count="4" />
      <LineId Id="10" Count="0" />
      <LineId Id="377" Count="0" />
      <LineId Id="374" Count="2" />
      <LineId Id="373" Count="0" />
      <LineId Id="384" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>