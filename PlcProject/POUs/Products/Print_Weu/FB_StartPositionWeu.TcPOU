<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="FB_StartPositionWeu" Id="{57e46adf-0651-4188-b0a4-ce8ff8a13827}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_StartPositionWeu EXTENDS T_NamedBase IMPLEMENTS I_StartPosDetect
VAR_INPUT
  bEnable                         : BOOL;            // enable start position detection
  nCurrentPos                     : DINT;            // current position in Pulses/Subpixels
  fCurrentSpeed                   : LREAL;           // actual speed of conveyor in [m/s]
  fSubstrateLength                : LREAL;           // substrate length in [m]
END_VAR
VAR_OUTPUT
  fLateralOffset                  : LREAL;           // Lateral +/- shift in Y [m]
  fSubstrateLengthDetected        : LREAL;           // Detected substrate length
  nPrintMarkPosBits               : WORD;            // Print mark position (bit coded),  TODO: avoid this specific code
END_VAR
VAR
  bInit : BOOL;   // fb initialized
  nMode : (MARK, SIMULATE_INTERN, SIMULATE_EXTERN) := MARK;   // StartTrigger mode
  
  // config
  _fResolutionPrint : LREAL;
  _fResolutionSubPx : LREAL;
  _pMarkDefinition : POINTER TO ST_MarkDefinition_Triangle;
  
  fbMarkDetection : FB_MarkDetection_Triangle;    // StartPosition detection by marks
  fbStartPosSim   : FB_StartPositionDummy;        // StartPosition simulation

  // helper
  _bStart : BOOL;
  _nX0 : DINT;
  _bValid : BOOL;
  tOn_MissingMarksCheck : TON;   // trigger check (triggers within given time)
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// TODO: >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
// (optional) Mode: Encoder C HW_LATCH instead of marks
// <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

// check parameter
IF NOT bInit THEN RETURN; END_IF
IF fCurrentSpeed = 0 THEN RETURN ; END_IF   // avoid 0 division

// default values (outputs and properties)
_bStart := FALSE;
_bValid := TRUE;
nPrintMarkPosBits := 0;  // no marks used
fLateralOFfset := 0;
fSubstrateLengthDetected := fSubstrateLength;

// mode selection
IF _pMarkDefinition = 0 OR_ELSE NOT _pMarkDefinition^.bEnabled THEN
  nMode := SIMULATE_EXTERN;
  nMode := SIMULATE_INTERN;
ELSIF NOT _pMarkDefinition^.bEnabled THEN   // if mark config is given and enabled
  nMode := MARK; 
END_IF

// run mode
IF nMode = MARK  THEN 
  // - with mark (forward / backward / other mark orientation)
  fbMarkDetection(
    bEnable:=bEnable,
    fResolution:=_fResolutionPrint*_fResolutionSubPx,
    fSubstrateLength:=fSubstrateLength,
    pMarkDefinition:=_pMarkDefinition,
    nCurrentPos:=nCurrentPos,
    fCurrentSpeed:=fCurrentSpeed,
    //bStartTrig=>_bStart,
    //nOffset_X0=>_nX0,
    fLateralOffset=>fLateralOffset,
    fSubstrateLengthDetected=>fSubstrateLengthDetected
  );
  // set I_StartPosDetect properties
  _bStart := fbMarkDetection.bStartTrig;
  _bValid := TRUE;
  _nX0    := fbMarkDetection.nOffset_X0;
  
 (*Check area with the correct arrangement of the mark sensor*)
 IF fbMarkDetection.bAreaOk THEN nPrintMarkPosBits.2 := TRUE; (*mark position in center*) 
  ELSIF fbMarkDetection.fLateralOffset > 0  THEN nPrintMarkPosBits.1 := TRUE; (*mark position on side I*) 
  ELSIF fbMarkDetection.fLateralOffset < 0  THEN nPrintMarkPosBits.3 := TRUE; (*mark position on side II*) 
  END_IF
  
  
ELSIF nMode = SIMULATE_INTERN THEN
  // without mark, simulate internally, started by external trigger and re-occur after every image/sheet length
  fbStartPosSim.fSubstrateLength := fSubstrateLength;   // same as given
  fbStartPosSim.bSimEnable := bEnable;                  // start simulatin with enable
  fbStartPosSim(
    //bTrigger:=,
    lPosition:=nCurrentPos,
    fSpeed:=fCurrentSpeed,
    fResolution:=_fResolutionPrint*_fResolutionSubPx
  );
  // set I_StartPosDetect properties
  _bStart := fbStartPosSim.bStartTrig;
  _bValid := fbStartPosSim.bValid;
  _nX0    := fbStartPosSim.nStartPositionX0;
  
  
ELSIF nMode = SIMULATE_EXTERN THEN
  // without mark, based on external reference
  
  // set I_StartPosDetect properties
  _bStart := ;
  _bValid := TRUE;
  _nX0    := ;
ELSE
  ;
END_IF


// supervision of mark missing (at least one trigger within 2 image lengths
//     nPrintMarkPosBits.0 := TRUE; (*=1 mark missing*) 
tOn_MissingMarksCheck(IN := bEnable AND NOT _bStart, PT := REAL_TO_TIME((2 * fSubstrateLength) / fCurrentSpeed * 1000), 
                      Q=>nPrintMarkPosBits.0
);

]]></ST>
    </Implementation>
    <Folder Name="I_StartPosDetect" Id="{3bb3d753-1c9e-472a-8c3f-aec14f002339}" />
    <Property Name="bStartTrig" Id="{e283e51a-7bd3-43b7-929a-8344709bc1e4}" FolderPath="I_StartPosDetect\">
      <Declaration><![CDATA[{warning 'add property implementation'}
(*
  A new container detected.
  NOTE: a pulse only
*)
PROPERTY bStartTrig : BOOL
]]></Declaration>
      <Get Name="Get" Id="{d88d396b-d2d9-47aa-81b3-e6702f1b2da2}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[bStartTrig := _bStart;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="bValid" Id="{41d06b7b-92f2-4bfb-b40f-9ec4299b6723}" FolderPath="I_StartPosDetect\">
      <Declaration><![CDATA[{warning 'add property implementation'}
(*
  A valid container detected.
*)
PROPERTY bValid : BOOL
]]></Declaration>
      <Get Name="Get" Id="{b92c99f7-0a7d-43bc-bf16-56f41d6ca946}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[bValid := _bValid;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Init" Id="{01bf650e-7028-4cf6-a973-171d14a98e24}">
      <Declaration><![CDATA[METHOD Init
VAR_INPUT
  fPrintResolution      : LREAL := 600;         // print(head) resolution in [dpi]
  fSubPxResolution      : LREAL := 32;          // SubPixel resolution [SubPx], resolution factor (fI_PrintResolution*fI_SubPxResolution=>Output resolution)
  pMarkDefinition       : POINTER TO ST_MarkDefinition_Triangle;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _pMarkDefinition = 0 THEN LogError('Invalid parameter'); END_IF

_fResolutionPrint := fPrintResolution;
_fResolutionSubPx := fSubPxResolution;
_pMarkDefinition := pMarkDefinition;

// (optional) we use pointerTo_PU.registerStatusClient(sClient := fbStartPosSim);

bInit := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Property Name="nStartPositionX0" Id="{06a37ff4-d366-43a1-82a9-5e3599c3a8b1}" FolderPath="I_StartPosDetect\">
      <Declaration><![CDATA[{warning 'add property implementation'}
(*
  Detected start position X0 (absolute) in [SubPx].
*)
PROPERTY nStartPositionX0 : DINT
]]></Declaration>
      <Get Name="Get" Id="{f436fe25-f2e2-42fc-baef-e97b91a2c4cc}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[nStartPositionX0 := _nX0;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Reset" Id="{d27785f9-97b4-40ba-9b2e-a44c292ce0d7}">
      <Declaration><![CDATA[METHOD reset
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fbMarkDetection.reset();]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_StartPositionWeu">
      <LineId Id="233" Count="1" />
      <LineId Id="236" Count="1" />
      <LineId Id="232" Count="0" />
      <LineId Id="76" Count="0" />
      <LineId Id="153" Count="0" />
      <LineId Id="225" Count="5" />
      <LineId Id="224" Count="0" />
      <LineId Id="131" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="155" Count="0" />
      <LineId Id="238" Count="1" />
      <LineId Id="156" Count="0" />
      <LineId Id="240" Count="0" />
      <LineId Id="157" Count="0" />
      <LineId Id="84" Count="0" />
      <LineId Id="83" Count="0" />
      <LineId Id="81" Count="0" />
      <LineId Id="96" Count="7" />
      <LineId Id="110" Count="0" />
      <LineId Id="112" Count="0" />
      <LineId Id="148" Count="0" />
      <LineId Id="181" Count="0" />
      <LineId Id="104" Count="0" />
      <LineId Id="219" Count="0" />
      <LineId Id="216" Count="0" />
      <LineId Id="218" Count="0" />
      <LineId Id="144" Count="0" />
      <LineId Id="217" Count="0" />
      <LineId Id="137" Count="0" />
      <LineId Id="143" Count="0" />
      <LineId Id="139" Count="0" />
      <LineId Id="141" Count="0" />
      <LineId Id="135" Count="0" />
      <LineId Id="147" Count="0" />
      <LineId Id="178" Count="0" />
      <LineId Id="85" Count="0" />
      <LineId Id="152" Count="0" />
      <LineId Id="180" Count="0" />
      <LineId Id="184" Count="0" />
      <LineId Id="87" Count="0" />
      <LineId Id="169" Count="3" />
      <LineId Id="168" Count="0" />
      <LineId Id="215" Count="0" />
      <LineId Id="174" Count="3" />
      <LineId Id="179" Count="0" />
      <LineId Id="88" Count="0" />
      <LineId Id="151" Count="0" />
      <LineId Id="220" Count="0" />
      <LineId Id="223" Count="0" />
      <LineId Id="221" Count="1" />
      <LineId Id="89" Count="0" />
      <LineId Id="91" Count="2" />
      <LineId Id="78" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="162" Count="0" />
      <LineId Id="39" Count="0" />
      <LineId Id="163" Count="0" />
      <LineId Id="165" Count="0" />
      <LineId Id="129" Count="0" />
      <LineId Id="117" Count="0" />
    </LineIds>
    <LineIds Name="FB_StartPositionWeu.bStartTrig.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_StartPositionWeu.bValid.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_StartPositionWeu.Init">
      <LineId Id="15" Count="1" />
      <LineId Id="5" Count="0" />
      <LineId Id="13" Count="1" />
      <LineId Id="28" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="17" Count="0" />
    </LineIds>
    <LineIds Name="FB_StartPositionWeu.nStartPositionX0.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_StartPositionWeu.Reset">
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>