<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="FB_InspectionSystemTrigger" Id="{ec098ee4-1e1e-4fe3-8952-b23d7a573fda}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_InspectionSystemTrigger EXTENDS FB_Commons
(*************************************************************************************************)
(*  FILENAME:    FB_InspectionSystemTrigger                                                      *)
(*  PROJECT:     CALMAR PUPLC                                                                    *)
(*  COPYRIGHT:   All rights reserved (c) Wifag//Polytype, Fribourg/Switzerland (2021)            *)
(*  ENVIRONMENT: TwinCAT PLC                                                                     *)
(*  VERSION:     <version>                                                                       *)
(*************************************************************************************************)
(*  DESCRIPTION:                                                                   <description> *)
(*    Generate timestamp trigger output based on timestamp sensor input. Two variants            *)
(*    exist, a timebased approach where the trigger time is calculated at the time the sensor    *)
(*    event occurs, and a second approach where the sensor event time is translated to a sensor  *)
(*    event position, and a trigger is generated when the calculated trigger position has almost *)
(*    been reached. The second approach has the advantage that is is less susceptible to speed   *)
(*    variations.                                                                                *)
(*                                                                                </description> *)
(*************************************************************************************************)

{library public}
VAR_INPUT
  (*System signals*)
  bI_SensorState                  : BOOL;                   // Sensor signal
  (*used if _bUsePositionTrigger = TRUE*)
  iI_CurrentPos                   : DINT;                   // Current position in [SubPx]
  fI_ConveyorSpeed                : LREAL;                  // Current speed of substrate in [m/s]
  iI_SensorX0                     : DINT;                   // Detected X0 position of sensor [SubPx]
  (*used if _bUsePositionTrigger = FALSE*)
  tI_SensorTimeStampPos           : T_DCTIME64;             // Sensor last detection timestamp
  
  (*Debug & Test*)
  bI_ManualTrigger                : BOOL;                   // Manual start trigger
END_VAR

VAR_OUTPUT
  (*Link to EL2252*)
  ObTrigger                 AT%Q* : BOOL;                   // EL2252 Output1 - TRUE=start camer
  OtTriggerStartTime        AT%Q* : T_DCTIME64;             // EL2252 Timestamp - where to set outputs
  OnTriggerCommand          AT%Q* : BYTE;                   // EL2252 Command - activation timestamp ouput
END_VAR

(*{library private}*)
VAR
  bInitOk                         : BOOL;           // initialized
  bSpeedValid                     : BOOL;           // speed is valid
  bTriggerArmed                   : BOOL;           // trigger is armed
  rT_Sensor                       : R_TRIG;        // rising edge trigger sensor
  
  (*configuration*)
  _nResolution                    : INT := 1;       // Printhead Resolution [e.g. 600] x Subpixel Resolution [e.g. 32]*)
  _bUsePositionTrigger            : BOOL;           // FALSE: Calculate time with speed and position distance@sensor event, TRUE: Calculate sensor event position, launch trigger based on position
  _fTriggerLength                 : LREAL := 10;    // Length of trigger signal in ms, min. 3 bus cycles
  
 
  eState                          : BYTE;            (*State*)
  tSensor_TimeStamp               : T_DCTIME64;      (*Sensor last detection timestamp*)
  tCurrentTime                    : T_DCTIME64;      (*Current system dc time [64bit]*)
  tTrigger_EventTime              : T_DCTIME64;      (*Trigger event timestamp*)

  _bManualStart                   : BOOL;
  fDeltaDistance                  : LREAL;           (*Distance that the substrate moved between the detection and the treatment of the information [m]*)
  _nX0                            : DINT;            (*Detected X0 position of CT [SubPx] by sensor*)
  _nCamStartPos                   : DINT;            (*Camera start position*)
  _nCamStartedPos                 : DINT;            (*Camera started position [SubPx]*)
  
  tCurrentTimeStamp               : T_DCTIME64;      (* Get Current Timestamp *)
  tLastTimeStamp                  : T_DCTIME64;      (* Get Current Timestamp *)
  fCycleTime                      : LREAL;           (* Current calcualted cycle time [s]*)

  fRemDist                        : LREAL;           (*Remaining distance until trigger occurs [m]*)
  fPreTriggerPosition             : LREAL;           (*Margin between effective trigger position and generation of timestamp*)

  fb_FTrig_ManualTeach            : F_TRIG;          (*FTrig for teach to release inhibit*)
  
  (*Debug*)
  _bVerbose                       : BOOL;
END_VAR

VAR CONSTANT
  fC_MIN_CONVEYOR_SPEED           : LREAL := 0.01;
  fC_PreTrigFactor                : LREAL := 3.0;
  fC_SheetLengthMargin            : LREAL := 0.01;   (*Added 10 mm margin for substrate length in case of print quality strips at the end of sheet in case of start with edge*)

  (*State*)
  cL_IDLE                         : BYTE := 0;       (*Idle state, no trigger active*)
  cL_SENSOREVENT                  : BYTE := 1;       (*Sensor started trigger generation*)
  cL_WAITALMOSTSTART              : BYTE := 2;       (*Wait timestamp calculation critera*)
  cL_WAITSTART                    : BYTE := 3;       (*Wait for trigger generation critera*)
  cL_WAITFEEDBACK                 : BYTE := 4;       (*Wait on feedback from trigger*)
  cL_TRIGACTIVE                   : BYTE := 5;       (*Trigger set*)
  cL_WAITSTOP                     : BYTE := 6;       (*Trigger reset*)

  (*EL2252 Command*)
  cL_INACTIVE                     : BYTE := 0;
  cL_ACTIVE                       : BYTE := 3;
END_VAR

VAR PERSISTENT
  bR_Enable                       : BOOL  := TRUE;   (*Enable system*)
  fR_DeltaDistance                : LREAL := 0.010;  (*Distance that the substrate moved between the detection and the treatment of the information [m]*)
  nR_TimeDistance                 : ULINT := 50;     (*Time that the substrate moved between the detection and the treatment of the information [ms]*)
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF NOT bInitOk THEN RETURN; END_IF;

// General calculations
bSpeedValid   := fI_ConveyorSpeed > fC_MIN_CONVEYOR_SPEED;    // speed valid (ignore trigger if not moving)
tCurrentTime  := F_GetCurDcTaskTime64();                      // current dc time (most accurate time stamp we have)
fCycleTime    := (TO_LREAL(tCurrentTime) - TO_LREAL(tLastTimeStamp)) * 1E-9;  tLastTimeStamp  := tCurrentTime;  // calculate cycle time of this block
bTriggerArmed := bR_Enable AND (bSpeedValid OR NOT _bUsePositionTrigger);

rT_Sensor(CLK := bI_SensorState);

IF NOT bTriggerArmed THEN
  eState := cL_IDLE;
END_IF

(*State Machine ----------------------------------------------------------------*)
CASE eState OF
  cL_IDLE:     (*Not started, waiting for start trigger*)
  
    IF bTriggerArmed THEN (*ignore trigger else*)
       IF rT_Sensor.Q THEN      (*Start launched*)
        eState            := cL_SENSOREVENT;
        tSensor_TimeStamp := tI_SensorTimeStampPos;
        _bManualStart     := FALSE;
      ELSIF bI_ManualTrigger THEN  (*Manual start launched*)
        eState            := cL_SENSOREVENT;
        tSensor_TimeStamp := tCurrentTime;
        _bManualStart     := TRUE;
      END_IF;
    END_IF
    
    OnTriggerCommand := cL_INACTIVE;
    ObTrigger        := FALSE;

  cL_SENSOREVENT:     (*Not started*)
    IF NOT bSpeedValid AND _bUsePositionTrigger THEN 
      eState := cL_IDLE;        // ignore trigger if not moving anymore (avoid zero division)
    ELSE
      (*Position where the sensor has been detected in [SubPx]*)
      _nX0 := iI_SensorX0;
      
      IF _bUsePositionTrigger THEN
        eState             := cL_WAITALMOSTSTART;
      ELSE
        eState             := cL_WAITSTART;
        tTrigger_EventTime := (tSensor_TimeStamp + (nR_TimeDistance * 1_000_000));  (*[ms] to [ns]*)
      END_IF;
      
      OnTriggerCommand := cL_INACTIVE;
      ObTrigger        := TRUE;
    END_IF

  cL_WAITALMOSTSTART: (*Only active when bI_UsePositionTrigger=TRUE: wait until Start position almost reached, then set timestamp*)
    (*Remaining distance in [m], converted to REAL to avoid integer wrap problems*)
    fRemDist             := fR_DeltaDistance + (DINT_TO_REAL(_nX0) - DINT_TO_REAL(iI_CurrentPos)) * 0.0254 / INT_TO_REAL(_nResolution);
    fPreTriggerPosition  := fC_PreTrigFactor * fCycleTime * fI_ConveyorSpeed;

    IF fRemDist < fPreTriggerPosition THEN
      eState             := cL_WAITSTART;
      tTrigger_EventTime := (tCurrentTime + LREAL_TO_ULINT(fRemDist / fI_ConveyorSpeed * 1E9));    // division save because we are moving to reach this position
      OnTriggerCommand   := cL_ACTIVE;  (*Arm EL2252*)

      LogTsDiff(aIdent := 'WAITALMOSTSTART: ', t1 := tTrigger_EventTime, t2 := tCurrentTime);
    ELSE
      eState           := cL_WAITALMOSTSTART;
      OnTriggerCommand := cL_INACTIVE;
    END_IF;

    ObTrigger := TRUE;

  cL_WAITSTART:       (*Wait until start time reached*)
    IF (tTrigger_EventTime < tCurrentTime) THEN (* StartTime elapsed *)
      // position reached
      eState           := cL_TRIGACTIVE;
      OnTriggerCommand := cL_INACTIVE; (*Disarm already command to EL2252, trigger generated*)
    ELSE
      // position not yet reached
      eState           := cL_WAITSTART;
      OnTriggerCommand := cL_ACTIVE;  (*Arm EL2252*)
    END_IF;

    ObTrigger := TRUE;  
    
  cL_TRIGACTIVE:   (*Trigger high*)
    eState := cL_WAITSTOP;
    
    // calculate end timestamp of trigger (end of trigger active signal)
    tTrigger_EventTime := (tTrigger_EventTime + LREAL_TO_ULINT(_fTriggerLength * 1E6));
    
    OnTriggerCommand := cL_INACTIVE;
    ObTrigger        := FALSE;
    
  cL_WAITSTOP:  (*Wait until trigger time has elapsed*)
    IF (tTrigger_EventTime < tCurrentTime) THEN (* StopTime elapsed *)
      eState           := cL_IDLE;
      OnTriggerCommand := cL_INACTIVE; (*Disarm EL2252, trigger generated*)
    ELSE
      eState           := cL_WAITSTOP;
      OnTriggerCommand := cL_ACTIVE;  (*Arm EL2252*)
    END_IF;

    ObTrigger        := FALSE;

  ELSE  (*Default*)
    eState           := cL_IDLE;
    ObTrigger        := FALSE;
    OnTriggerCommand := cL_INACTIVE;
END_CASE;

OtTriggerStartTime := tTrigger_EventTime;

(********************************* END OF FB *****************************************************)]]></ST>
    </Implementation>
    <Method Name="Init" Id="{46eda74d-1233-4e75-9dff-c1e3efdde8f4}">
      <Declaration><![CDATA[METHOD Init
VAR_INPUT
  nResolution                   : INT := 1;        (*Printhead Resolution [e.g. 600] x Subpixel Resolution [e.g. 32]*)
  bUsePositionTrigger           : BOOL;            (*FALSE: Calculate time with speed and position distance@sensor evont*)
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[(*zero divisions*)
IF nResolution = 0 THEN 
  bInitOk := FALSE;

  RETURN; 
END_IF;

_nResolution         := nResolution;
_bUsePositionTrigger := bUsePositionTrigger;


bInitOk := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="LogTsDiff" Id="{20caa5c8-bb11-4ee5-8484-f26bd54976be}">
      <Declaration><![CDATA[(*
  Log timestamp difference (if verbose active).
  t1-t2 
*)
METHOD LogTsDiff : BOOL
VAR_INPUT
  aIdent : STRING;
  t1 : T_DCTIME64;
  t2 : T_DCTIME64;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _bVerbose THEN
  LogLvl(Lvl:=E_LogSeverity.Debug, Msg:=
       F_Concat7(aIdent, 
                 't1: ', TO_STRING(t1), 
                 ' t2: ', TO_STRING(t2), 
                 ' t1-t2 [ms]: ', TO_STRING((TO_LREAL(t1)-TO_LREAL(t2))*1E-6)
       )
  );
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="nStartPositionX0" Id="{98ef4b86-2881-4bc0-8f2f-c4878bc43198}">
      <Declaration><![CDATA[(*
  Detected start position X0 (absolute) in [SubPx].
*)
PROPERTY nStartPositionX0 : DINT
]]></Declaration>
      <Get Name="Get" Id="{00a31ccd-d500-40c8-851b-114f73c27335}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[nStartPositionX0 := _nX0;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="UsePositionTrigger" Id="{0e94ec1b-8469-4faf-a87f-3f64024f14bc}">
      <Declaration><![CDATA[PROPERTY UsePositionTrigger : BOOL]]></Declaration>
      <Get Name="Get" Id="{6b76a223-123c-4911-8e6d-24737f62a670}">
        <Declaration><![CDATA[
VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[UsePositionTrigger := _bUsePositionTrigger;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{ffe7c428-1e21-46b7-8001-8d272e985b61}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_bUsePositionTrigger := UsePositionTrigger;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <LineIds Name="FB_InspectionSystemTrigger">
      <LineId Id="2387" Count="5" />
      <LineId Id="3492" Count="0" />
      <LineId Id="4216" Count="0" />
      <LineId Id="4207" Count="0" />
      <LineId Id="4316" Count="0" />
      <LineId Id="2605" Count="0" />
      <LineId Id="4317" Count="1" />
      <LineId Id="2399" Count="3" />
      <LineId Id="2610" Count="0" />
      <LineId Id="2606" Count="0" />
      <LineId Id="2611" Count="0" />
      <LineId Id="2404" Count="0" />
      <LineId Id="4322" Count="0" />
      <LineId Id="2406" Count="4" />
      <LineId Id="2415" Count="0" />
      <LineId Id="3336" Count="0" />
      <LineId Id="2416" Count="2" />
      <LineId Id="2420" Count="0" />
      <LineId Id="3341" Count="0" />
      <LineId Id="3337" Count="1" />
      <LineId Id="3348" Count="0" />
      <LineId Id="3351" Count="1" />
      <LineId Id="3339" Count="0" />
      <LineId Id="3334" Count="0" />
      <LineId Id="2962" Count="0" />
      <LineId Id="2968" Count="2" />
      <LineId Id="2448" Count="0" />
      <LineId Id="2960" Count="0" />
      <LineId Id="2452" Count="1" />
      <LineId Id="3730" Count="0" />
      <LineId Id="2457" Count="7" />
      <LineId Id="2466" Count="0" />
      <LineId Id="2469" Count="0" />
      <LineId Id="4205" Count="0" />
      <LineId Id="3097" Count="0" />
      <LineId Id="2476" Count="3" />
      <LineId Id="4218" Count="0" />
      <LineId Id="2480" Count="0" />
      <LineId Id="2482" Count="0" />
      <LineId Id="3359" Count="0" />
      <LineId Id="2485" Count="0" />
      <LineId Id="3355" Count="0" />
      <LineId Id="2489" Count="0" />
      <LineId Id="2493" Count="1" />
      <LineId Id="3356" Count="0" />
      <LineId Id="2495" Count="0" />
      <LineId Id="3363" Count="0" />
      <LineId Id="2499" Count="2" />
      <LineId Id="2503" Count="0" />
      <LineId Id="2527" Count="1" />
      <LineId Id="3213" Count="0" />
      <LineId Id="3215" Count="0" />
      <LineId Id="2529" Count="0" />
      <LineId Id="3214" Count="0" />
      <LineId Id="2540" Count="1" />
      <LineId Id="2544" Count="1" />
      <LineId Id="2547" Count="2" />
      <LineId Id="2551" Count="1" />
      <LineId Id="2554" Count="0" />
      <LineId Id="2556" Count="2" />
      <LineId Id="2561" Count="3" />
      <LineId Id="2566" Count="4" />
      <LineId Id="1688" Count="0" />
    </LineIds>
    <LineIds Name="FB_InspectionSystemTrigger.Init">
      <LineId Id="6" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="11" Count="1" />
      <LineId Id="15" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_InspectionSystemTrigger.LogTsDiff">
      <LineId Id="5" Count="0" />
      <LineId Id="8" Count="1" />
      <LineId Id="21" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="11" Count="1" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="FB_InspectionSystemTrigger.nStartPositionX0.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_InspectionSystemTrigger.UsePositionTrigger.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_InspectionSystemTrigger.UsePositionTrigger.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>