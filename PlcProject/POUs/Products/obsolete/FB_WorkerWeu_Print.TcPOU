<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="FB_WorkerWeu_Print" Id="{a3c0fca9-0a63-49f3-a9fd-25e7fe09223b}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_WorkerWeu_Print EXTENDS FB_WorkerWeu
VAR_INPUT
  nEncoderPos   : DINT;       // Absolute print position [SubPx]
  fEncoderSpeed  : LREAL;     // Print speed [m/s]
  bHardwareSync : BOOL;
  bHardwareHold : BOOL;
  fPrintStartOffset : LREAL;  //PU->PG/PA offset
  fPrintYOffset : LREAL;      //Y-Shift in ram memory
END_VAR
VAR_OUTPUT
END_VAR
VAR
  fbPs              : FB_PS;
  fbPa              : FB_PA;
  fB_PcAdapter      : FB_PC_Adapter;
  
  _fPrintStartOffset : LREAL;   // internal print start offset
  _nPosX0            : DINT;    // X0 for last attached CT (detected postion)
  _nPosXS            : DINT;    // XS for last attached CT (shifted print start position)
  _nPosXDelta        : DINT;    // Shift value X0 -> XS
  _fPosY             : LREAL;    // Y shift for last attached CT
  _bPaStarted        : BOOL;
  _bPaStartRequested : BOOL;
  fBStartTimeout     : TON;
  rTrigSync          : R_TRIG;

  (*Messaging*)
  _bMsgInitialized   : BOOL;
  fb_MsgQueue        : FB_MSG_QUEUE;                        (*Message queue*)
  fb_MsgHandler      : FB_MSG_HANDLER;                      (*Message handler*)
  sL_MsgConfig       : ST_MSG_CONFIG;                       (*Message config*)
  fb_Msg             : ARRAY [1..iC_NUM_MSG] OF FB_MESSAGE; (*Messages*)
END_VAR
VAR PERSISTENT
  _fStartShiftOffset : LREAL := fC_START_SHIFT_OFFSET;
  _fStartShiftFactor : LREAL := fC_START_SHIFT_FACTOR;
END_VAR
VAR CONSTANT
  iC_NUM_MSG : UDINT := 5;
  fC_START_SHIFT_FACTOR : LREAL := -2.4E-2;
  fC_START_SHIFT_OFFSET : LREAL := -1.0E-2;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[
//TODO Add error/warnings
bError := FALSE;
nError := 0;

//Start offset update
IF _fPrintStartOffset <> fPrintStartOffset THEN //Worker position changed
  IF _pAttachedCt = 0 THEN //Update only without attached container
    _fPrintStartOffset :=fPrintStartOffset;
	END_IF
END_IF

//Worker position update
IF _fWorkerPosition <> (_fPrintStartOffset + (_fStartShiftOffset + _fStartShiftFactor * fEncoderSpeed))  THEN //Worker position changed (camera settings change)
  IF _pAttachedCt = 0 THEN //Update only without attached container
    // WorkerPosition
    fPosition := _fPrintStartOffset + (_fStartShiftOffset + _fStartShiftFactor * fEncoderSpeed);
	END_IF
END_IF

(*---- Messaging -----------------------*)
IF _bMsgInitialized THEN
  fb_MsgHandler();
  {warning 'TODO: implement PrintWorker & PG messages'}
  //fB_Msg[1](bI_Status := dfsdfdsf);
  fb_MsgQueue();
END_IF

]]></ST>
    </Implementation>
    <Property Name="aPaState" Id="{eb46f66a-52cc-4aca-b9e2-7eab452224bc}">
      <Declaration><![CDATA[PROPERTY aPaState : STRING]]></Declaration>
      <Get Name="Get" Id="{6aa6e61f-054f-4bba-a7d5-bef577cdf104}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[aPaState := fbPa.aPaState;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Attach" Id="{0707666f-371d-4dbd-816b-7dc7310c7f8c}">
      <Declaration><![CDATA[METHOD PROTECTED  Attach : BOOL
VAR_INPUT
  iCT              : I_CT;                         (*container at triggered event position*)
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Attach:=FALSE;

IF bEnable AND SUPER^.Attach(iCT:=iCT) THEN
  // Additional worker checks
    // - job is valid?
  IF _pAttachedCt^.pJob = 0 OR NOT _bJobActive THEN
    Release(iCT:=iCT);
    RETURN;   // do not print
  
  // CT valid & CT present
  ELSIF NOT _pAttachedCt^.bValid OR NOT _pAttachedCt^.bProductPresent THEN
    Release(iCT:=iCT);
    RETURN;   // do not print
  
  // Ignore start due to hardware hold  
  ELSIF bHardwareHold THEN
    //_pAttachedCt^.setError(ErrDef:=EC_Print.ecPaAbortHold, Src:=_pEcSrc^);
    Release(iCT:=iCT);
    RETURN;   // do not print
  // - OK attach
  ELSE
    Attach := TRUE;
	END_IF
  
  
  //Prepare print station
  fbPs.bPrintEnable := iCT.bValid AND iCT.bProductPresent;

  //Start print, PA should be in READY or DONE
  
  // Set X print position
  _nPosX0 := _pAttachedCt^.getPosX0(nPosDomain:=E_PosDomain.master_pos);
  _nPosXDelta := F_MeterToSubPixel(_fPrintStartOffset,_fPrintResolution*_fSubPxResolution); // + PG/PA Shift (additional PG offset 0 for firstLine)

  _nPosXS := _nPosX0 + _nPosXDelta;
  fB_PcAdapter.setPrintStartPos(nX0:=_nPosXS);
  
  // Set Y print position
  _fPosY := fPrintYOffset;
  fB_PcAdapter.setPrintYShift(nYShift:=FC_LREAL_TO_DINT(_fPosY));

  // check
  IF _nPosXS < nEncoderPos THEN
    LogWarning(Msg:='Print start position < Encoder position');
	END_IF
    
  IF fbPa.printStart() THEN
    _bPaStarted := FALSE;
    _bPaStartRequested := TRUE;
    Attach:=TRUE;
    LogLvl(Lvl:=E_LogSeverity.Debug, F_Concat2('printStart:', _pAttachedCt^.print(0)));  // print container
    LogLvl(Lvl:=E_LogSeverity.Debug, F_Concat4('> XS:', TO_STRING(_nPosXS), ' = X0:', TO_STRING(_pAttachedCt^.GetPosX0(nPosDomain:=E_PosDomain.master_pos))));
    LogLvl(Lvl:=E_LogSeverity.Debug, F_Concat2( ' + shStartOffs:', TO_STRING(F_MeterToSubPixel(_fPrintStartOffset,_fPrintResolution*_fSubPxResolution))));

  ELSE  
    LogError(Msg:='PA not ready to start at attach');
    Release(iCT := iCT);
	END_IF
  
ELSE
  // parent attach failed case
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="InitMsg" Id="{f53c39e1-05a2-4c68-b2ed-5482453a6341}">
      <Declaration><![CDATA[METHOD InitMsg : BOOL
VAR_INPUT
  pMsgInterface : POINTER TO ST_ADS_MSG_IF;
END_VAR
VAR
  nCtr : UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF pMsgInterface = 0 THEN RETURN; END_IF

(*Messaging*)
sL_MsgConfig.bI_Enable       := TRUE;
sL_MsgConfig.pI_FbMsgHandler := ADR(fb_MsgHandler);
fb_MsgHandler.pI_MsgQueue    := ADR(fb_MsgQueue);
fb_MsgQueue.pI_MsgInterface  := pMsgInterface;
fb_MsgQueue.cI_MaxElement    := 6;

(*Messages*)
FOR nCtr := 1 TO iC_NUM_MSG DO
  fb_Msg[nCtr].pI_MsgConfig       := ADR(sL_MsgConfig);
  fb_Msg[nCtr].iI_MsgLocation     := 0;
END_FOR
//fb_Msg[1].iI_MsgNumber       := ;
// ...

_bMsgInitialized := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="InitWorkerPrint" Id="{9e11bfb6-2c3b-4cf3-ab44-81a61cbfe170}">
      <Declaration><![CDATA[METHOD InitWorkerPrint : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT bInitialized THEN LogError('Base Worker not initialized! call init() before'); RETURN; END_IF

// worker specific init

//Print Aggregate
fbPa.bSyncAfterDone := FALSE;
fbPa.init(iPcAdapter := fB_PcAdapter, iPsInterface:=fbPs);]]></ST>
      </Implementation>
    </Method>
    <Method Name="mJobStart" Id="{e6930aa0-f0d8-458e-9de3-18f675c41155}">
      <Declaration><![CDATA[METHOD   mJobStart
VAR_INPUT
	sJobDef	: CalmarCompPrint.I_JobDefinition;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT bEnable THEN RETURN; END_IF  // only if enabled

fbPa.jobStart();

_bJobActive := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="mJobStop" Id="{8177ad7c-6de2-4f33-9116-3de9fb737ab6}">
      <Declaration><![CDATA[METHOD  mJobStop
VAR_INPUT
	sStatus	: CalmarCompPrint.I_JobStatus;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fbPa.jobStop();
_bJobActive := FALSE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="registerPc" Id="{3c39032f-7920-436e-9283-1f58258455df}">
      <Declaration><![CDATA[METHOD registerPc : BOOL
VAR_INPUT
  iNewPC : I_PC;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[registerPc := fB_PcAdapter.registerPc(iNewPC := iNewPC);]]></ST>
      </Implementation>
    </Method>
    <Method Name="registerPh" Id="{a62d8de9-9fbf-4ff4-bfce-d2ac72d680d3}">
      <Declaration><![CDATA[METHOD registerPh : BOOL
VAR_INPUT
    iPH : I_PH;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Attach head to print station
IF iPH <> 0 THEN
  fbPs.registerPh(iNewPh:=iPH);
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Property Name="sPcFlags" Id="{fa3ef9be-bfc1-497c-bb3e-5711955c8dd7}">
      <Declaration><![CDATA[PROPERTY sPcFlags : CalmarCompPrint.ST_PC_FLAGS]]></Declaration>
      <Get Name="Get" Id="{a2ceec3d-8ae2-491a-a457-fb2d18b795dc}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[sPcFlags := fB_PcAdapter.sPcFlags;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="sPcState" Id="{f1d03b4e-3371-40d0-92fe-ec59b44e18d0}">
      <Declaration><![CDATA[PROPERTY sPcState :  CalmarCompPrint.ST_PG_STATUS]]></Declaration>
      <Get Name="Get" Id="{ab56ea26-308c-402a-8c91-1f177a8a0181}">
        <Declaration><![CDATA[VAR
  sJobStatus : ST_JobProgress;
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[sPcState.bStartPrintCanEx := fBPa.bStartCanEx;
sPcState.bStartPrintExec  := fBPa.bStartExec;
sPcState.bStopPrintCanEx  := fBPa.bStopCanEx;
sPcState.bStopPrintExec   := fBPa.bStopExec;
sPcState.bPausePrintCanEx := FALSE;       // obsolete ???
sPcState.bPausePrintExec  := FALSE;       // obsolete ???
sPcState.bReady           := fB_PcAdapter.bAllReady OR fB_PcAdapter.bAllDone;
sPcState.bError           := fB_PcAdapter.bError;
sPcState.bPrinting        := fB_PcAdapter.bAllPrinting;
sPcState.bLoad            := fB_PcAdapter.bAllPreparing;
sPcState.bArmed           := fB_PcAdapter.bAllPrinting OR fB_PcAdapter.bAllReady OR fB_PcAdapter.bAllDone OR fB_PcAdapter.bAllPreparing;
sPcState.bEnabled         := bEnable;
sPcState.bStartStrb       := fBPa.bStartStrb;
sPcState.bPcEnabled       := fB_PcAdapter.bPcEnable;
sPcState.lProductCount    := 0;            // obsolete ???
sPcState.sJobStatus       := sJobStatus;   // obsolete ???
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="work" Id="{cfb4a899-7ea9-4389-855e-b56f1970d69a}">
      <Declaration><![CDATA[METHOD  work]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT bEnable THEN RETURN; END_IF

SUPER^.work();

(*Update virtual encoder on all controller boards*)
fB_PcAdapter.setEncoderPos(nEncoderPos);
fB_PcAdapter();

(*Call print aggregate*)
rTrigSync(CLK:=bHardwareSync); 
IF rTrigSync.Q THEN fbPa.sync(); END_IF   // external sync
fbPa.bHold := bHardwareHold;              // external hw hold
fbPa();

fBStartTimeout(IN := _bPaStartRequested,PT := T#60MS);

IF _pAttachedCt <> 0 AND bEnable THEN // Work only with attached container
  // PA control
  IF bHardwareHold THEN   // _pAttachedCt^.bValid AND
    // abort during printing
    _pAttachedCt^.setError(ErrDef:=EC_Print.ecPaAbortHold, Src:=_pEcSrc^);
    Release(_pAttachedCt^);
    
  ELSIF _bPaStartRequested THEN
    IF fbPa.bPrinting THEN
      _bPaStarted := TRUE;
      _bPaStartRequested := FALSE;
    ELSIF fBStartTimeout.Q THEN //Stop print at timeout to make ready for next container
      _bPaStarted := FALSE;
      _bPaStartRequested := FALSE;
      fbPa.printStop();
      _pAttachedCt^.setError(ErrDef:=EC_Print.ecPaStartErr, Src:=_pEcSrc^);
      Release(_pAttachedCt^);
		END_IF
  ELSIF _bPaStarted THEN
    // Set Y print position
    _fPosY := fPrintYOffset;
    fB_PcAdapter.setPrintYShift(nYShift := FC_LREAL_TO_DINT(_fPosY));

    //Release container when print finished
    IF fbPa.bDone OR fbPa.bStop THEN
      _bPaStarted := FALSE;
      Release(_pAttachedCt^);
    (*ELSIF fbpa.bError THEN
      _pAttachedCt^.setError(ErrDef:=EC_Print.ecPaPrintErr, Ident:=0);
      Release(_pAttachedCt^);*)
    END_IF 
	END_IF
END_IF  

(*Logging config*)
fbPa.LogLevel := LogLevel;
fB_PcAdapter.LogLevel := LogLevel;

]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_WorkerWeu_Print">
      <LineId Id="4" Count="3" />
      <LineId Id="10" Count="23" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_WorkerWeu_Print.aPaState.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_WorkerWeu_Print.Attach">
      <LineId Id="3" Count="14" />
      <LineId Id="98" Count="0" />
      <LineId Id="19" Count="11" />
      <LineId Id="35" Count="5" />
      <LineId Id="45" Count="5" />
      <LineId Id="54" Count="6" />
      <LineId Id="65" Count="5" />
      <LineId Id="77" Count="0" />
      <LineId Id="81" Count="7" />
    </LineIds>
    <LineIds Name="FB_WorkerWeu_Print.InitMsg">
      <LineId Id="3" Count="16" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_WorkerWeu_Print.InitWorkerPrint">
      <LineId Id="3" Count="4" />
      <LineId Id="11" Count="1" />
    </LineIds>
    <LineIds Name="FB_WorkerWeu_Print.mJobStart">
      <LineId Id="3" Count="2" />
      <LineId Id="7" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_WorkerWeu_Print.mJobStop">
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_WorkerWeu_Print.registerPc">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_WorkerWeu_Print.registerPh">
      <LineId Id="3" Count="3" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_WorkerWeu_Print.sPcFlags.Get">
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_WorkerWeu_Print.sPcState.Get">
      <LineId Id="3" Count="15" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_WorkerWeu_Print.work">
      <LineId Id="82" Count="1" />
      <LineId Id="3" Count="0" />
      <LineId Id="20" Count="13" />
      <LineId Id="52" Count="0" />
      <LineId Id="86" Count="4" />
      <LineId Id="85" Count="0" />
      <LineId Id="54" Count="9" />
      <LineId Id="105" Count="0" />
      <LineId Id="113" Count="0" />
      <LineId Id="106" Count="2" />
      <LineId Id="65" Count="0" />
      <LineId Id="84" Count="0" />
      <LineId Id="67" Count="12" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>