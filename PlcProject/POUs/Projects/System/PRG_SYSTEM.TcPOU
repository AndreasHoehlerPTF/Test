<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="PRG_SYSTEM" Id="{aa0ca443-15e5-42a0-a398-481694de7e3b}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM PRG_SYSTEM
(*************************************************************************************************)
(*  FILENAME:    PRG_SYSTEM.EXP                                                                  *)
(*  PROJECT:     CALMAR PUPLC                                                                    *)
(*  COPYRIGHT:   All rights reserved (c) Wifag//Polytype, Fribourg/Switzerland (2016)            *)
(*  ENVIRONMENT: TwinCAT PLC                                                                     *)
(*  VERSION:     <version>                                                                       *)
(*************************************************************************************************)
(*  DESCRIPTION:                                                                   <description> *)
(*    Controls the system functionalities.                                                       *)
(*    Main functions: register the module blocks, ADS block generation, ADS module mapping.      *)
(*                                                                                </description> *)
(*************************************************************************************************)
VAR
  bL_InitOK                  : BOOL := FALSE;
  
  sC_Ads_Info                : ST_ADS_INFO;
  sC_Ads_System              : ST_ADS_SYSTEM;
  ISystemBase                : I_SystemBase;                // reference to system base
  
  // Message control
  nMsgResetRequests          : UINT;
  fb_RTrigMsgResetRequest    : R_TRIG;
  
  // Version
  stProgramVersion           : ST_LibVersion;               // version information of project from TwinCAT dialog entry
  aCurrentDateTime           : STRING;  
  
  // View
  nMainVisuFrameIndex        : UINT := 0;   // VISU_Main frame selection
  sMainButtons               : ARRAY[0..4] OF ST_ButtonFrameSel_Def := [
                                                (sImgId:='droplet_w',   nFrameIdx:=0, pFrameSelect:=ADR(nMainVisuFrameIndex), sVisuName:='InkSystem'),
                                                (sImgId:='printer_w',   nFrameIdx:=1, pFrameSelect:=ADR(nMainVisuFrameIndex), sVisuName:='Print'),
                                                (sImgId:='book_w',      nFrameIdx:=2, pFrameSelect:=ADR(nMainVisuFrameIndex), sVisuName:='Recipe'),
                                                (sImgId:='gear_w',      nFrameIdx:=3, pFrameSelect:=ADR(nMainVisuFrameIndex), sVisuName:='Service'),
                                                (sImgId:='lightning_w', nFrameIdx:=4, pFrameSelect:=ADR(nMainVisuFrameIndex), sVisuName:='Machine')
                                              ];
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// Init
IF NOT bL_InitOK THEN Init(); END_IF;

(* Message control
  Some errors in the PLC needs TO reset twice TO clear the error completely.
  Message reset from Gallus will be send twice to the PUC.
*)
{warning 'TODO: test if msg reset still works'}
fb_RTrigMsgResetRequest(CLK := PRG_MACHINE.IbEAP_MessageReset);
IF fb_RTrigMsgResetRequest.Q THEN nMsgResetRequests := 2; END_IF
IF nMsgResetRequests > 0 THEN
  IF NOT PRG_SYSTEMBASE.resetPucMessages() THEN
    // request done
    nMsgResetRequests := nMsgResetRequests - 1;
	END_IF
END_IF

(*Get current time*)
aCurrentDateTime := F_Concat3(F_TimeGetDate(), ' ', F_TimeGetTime()); 

(*Call system base*)
PRG_SYSTEMBASE();
PRG_MACHINE.updateSleepLock(); // must be called after SystemBase, to overwrite CanEx
]]></ST>
    </Implementation>
    <Method Name="Init" Id="{c7acf598-9914-442c-a081-50b8b2079f10}">
      <Declaration><![CDATA[METHOD Init

]]></Declaration>
      <Implementation>
        <ST><![CDATA[(*--- init call only once*)
IF bL_InitOK = TRUE THEN RETURN; END_IF

// Get system reference
ISystemBase := PRG_SYSTEMBASE.getSystemBaseInterface();
IF ISystemBase = 0 THEN RETURN; END_IF
// Wait until system(base) is booted
IF ISystemBase.bBooting THEN RETURN; END_IF


// System specific setup
sC_Ads_System.aMachine        := aC_NAME_PRODUCT;
sC_Ads_System.aProject        := aC_NAME_PROJECT;
sC_Ads_System.aProjectVersion := aC_VERSION_PRODUCT;
sC_Ads_System.iVersion        := iC_VERSION_PRODUCT;

// module specific setup
PRG_SYSTEMBASE.setup( pI_Ads_Info               := ADR(sC_Ads_Info)
                    , pI_Ads_System             := ADR(sC_Ads_System));
// --> done in PRG_SYSTEMBASE



//PRG_SYSTEMBASE.sI_AppInfo := _AppInfo;
IF F_CmpLibVersion(stLibVersion_CalmarCompSystem, 1, 6, 1, 0) < 0 THEN
  // because of FB_Maintenance and used template visu in VISU_SYSTEM
  F_Log(LogSeverity:=E_LogSeverity.Error, 'PRG_SYSTEMBASE requires CalmarCompSystem >= 1.6.1');
END_IF

(*--- set library and project versions*)
PRG_SYSTEMBASE.SetVersion(aI_Name:='Tc2_System', stLibVersion_Tc2_System);

stProgramVersion := F_GetVersion();
stProgramVersion.sVersion := F_BuildVersionString(F_GetVersion());
PRG_SYSTEMBASE.SetVersion(aI_Name:='PlcProject', stProgramVersion);

{IF defined (variable: stLibVersion_CalmarCommons)}
  PRG_SYSTEMBASE.SetVersion(aI_Name:='CalmarCommons', stLibVersion_CalmarCommons);
{END_IF}
{IF defined (variable: stLibVersion_CalmarCompDevices)}
  PRG_SYSTEMBASE.SetVersion(aI_Name:='CalmarCompDevices', stLibVersion_CalmarCompDevices);
{END_IF}
{IF defined (variable: stLibVersion_CalmarCompSystem)}
  PRG_SYSTEMBASE.SetVersion(aI_Name:='CalmarCompSystem', stLibVersion_CalmarCompSystem);
{END_IF}
{IF defined (variable: stLibVersion_CalmarCompPrint)}
  PRG_SYSTEMBASE.SetVersion(aI_Name:='CalmarCompPrint', stLibVersion_CalmarCompPrint);
{END_IF}
{IF defined (variable: stLibVersion_CalmarCompMachine)}
  PRG_SYSTEMBASE.SetVersion(aI_Name:='CalmarCompMachine', stLibVersion_CalmarCompMachine);
{END_IF}
{IF defined (variable: stLibVersion_CalmarCompInkSystem)}
  PRG_SYSTEMBASE.SetVersion(aI_Name:='CalmarCompInk', stLibVersion_CalmarCompInkSystem);
{END_IF}
{IF defined (variable: stLibVersion_CalmarCompTcpIp)}
  PRG_SYSTEMBASE.SetVersion(aI_Name:='CalmarCompTcpIp', stLibVersion_CalmarCompTcpIp);
{END_IF}
{IF defined (variable: stLibVersion_CalmarProdDmax)}
  PRG_SYSTEMBASE.SetVersion(aI_Name:='CalmarProdDmax', stLibVersion_CalmarProdDmax);
{END_IF}


(*--- done*)
bL_InitOK := TRUE;]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="PRG_SYSTEM">
      <LineId Id="1028" Count="0" />
      <LineId Id="1322" Count="0" />
      <LineId Id="1315" Count="0" />
      <LineId Id="1104" Count="0" />
      <LineId Id="1319" Count="0" />
      <LineId Id="1318" Count="0" />
      <LineId Id="1320" Count="1" />
      <LineId Id="1105" Count="0" />
      <LineId Id="1109" Count="0" />
      <LineId Id="1225" Count="1" />
      <LineId Id="1313" Count="0" />
      <LineId Id="1230" Count="0" />
      <LineId Id="1229" Count="0" />
      <LineId Id="1227" Count="0" />
      <LineId Id="1141" Count="0" />
      <LineId Id="1183" Count="1" />
      <LineId Id="1142" Count="0" />
      <LineId Id="986" Count="0" />
      <LineId Id="988" Count="0" />
      <LineId Id="1272" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="PRG_SYSTEM.Init">
      <LineId Id="6" Count="59" />
      <LineId Id="106" Count="0" />
      <LineId Id="105" Count="0" />
      <LineId Id="67" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>